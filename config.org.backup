#+TITLE: Emacs Configuration for C11 Development
#+AUTHOR: Chris
#+DESCRIPTION: Literate Emacs configuration using org-mode for C11 development with LSP
#+STARTUP: overview

* Introduction
This is a literate Emacs configuration written in org-mode for C11 development.
The configuration includes LSP support via Eglot, quick build commands, and a clean setup.

* Basic Settings
** Startup and UI
Clean up the default Emacs interface for a minimal development environment.

#+BEGIN_SRC emacs-lisp
;; Basic settings
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;; Replace default scratch buffer with interactive dashboard
(setq initial-major-mode 'org-mode)            ; Start in org-mode
(setq initial-buffer-choice                    ; Use dashboard as startup buffer
      (lambda ()
        (let ((dashboard-file (expand-file-name "dashboard.org" user-emacs-directory)))
          (if (file-exists-p dashboard-file)
              (find-file-noselect dashboard-file)
            (get-buffer-create "*Dashboard*")))))

;; Session persistence - remember everything automatically
(desktop-save-mode 1)                          ; Save/restore buffers and window config
(setq desktop-restore-eager 5)                 ; Restore first 5 buffers immediately
(setq desktop-lazy-verbose nil)                ; Don't show messages for lazy loading
(setq desktop-save t)                          ; Always save session
(setq desktop-load-locked-desktop t)           ; Load even if locked

;; Remember recent files
(recentf-mode 1)
(setq recentf-max-saved-items 100)             ; Remember 100 recent files
(setq recentf-auto-cleanup 'never)             ; Don't cleanup automatically

;; Remember minibuffer history
(savehist-mode 1)
(setq savehist-additional-variables            ; Save additional useful variables
      '(search-ring regexp-search-ring))

;; Remember cursor position in files
(save-place-mode 1)

;; Persistent org-mode scratch buffer
(defun save-persistent-scratch ()
  "Save the org scratch buffer to disk only if it has been modified."
  (when (get-buffer "*scratch*")
    (with-current-buffer "*scratch*"
      (when (buffer-modified-p)
        (write-region (point-min) (point-max)
                      (expand-file-name "scratch.org" user-emacs-directory))
        (set-buffer-modified-p nil)  ; Mark as unmodified after saving
        (message "Scratch buffer saved")))))

(defun load-persistent-scratch ()
  "Load the persistent org scratch buffer from disk."
  (let ((scratch-file (expand-file-name "scratch.org" user-emacs-directory)))
    (with-current-buffer "*scratch*"
      (erase-buffer)
      (if (file-exists-p scratch-file)
          (insert-file-contents scratch-file)
        ;; Create initial org-mode scratch content
        (insert "#+TITLE: Scratch Notes\n")
        (insert "#+AUTHOR: Chris\n")
        (insert "#+DATE: " (format-time-string "%Y-%m-%d") "\n\n")
        (insert "* Quick Notes\n\n")
        (insert "* Code Experiments\n\n")
        (insert "#+BEGIN_SRC emacs-lisp\n")
        (insert ";; Evaluate with C-c C-c\n")
        (insert "(+ 1 2 3)\n")
        (insert "#+END_SRC\n\n")
        (insert "* TODO Items\n")
        (insert "- [ ] Task 1\n")
        (insert "- [ ] Task 2\n\n"))
      (org-mode)
      (goto-char (point-min)))))

;; Auto-save org scratch buffer periodically
(run-with-idle-timer 30 t 'save-persistent-scratch)  ; Save every 30 seconds when idle

;; Initialize org-mode scratch on startup
(add-hook 'after-init-hook
          (lambda ()
            ;; Kill default scratch if it exists
            (when (get-buffer "*scratch*")
              (with-current-buffer "*scratch*"
                (when (eq major-mode 'lisp-interaction-mode)
                  (erase-buffer))))
            ;; Load our persistent org scratch
            (load-persistent-scratch)))

;; Save scratch on exit
(add-hook 'kill-emacs-hook 'save-persistent-scratch)

;; Create org scratch buffer function
(defun create-scratch-buffer ()
  "Create or switch to persistent org-mode scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*")
  (unless (eq major-mode 'org-mode)
    (org-mode)))

;; Dashboard functions
(defun open-dashboard ()
  "Open the Emacs dashboard."
  (interactive)
  (let ((dashboard-file (expand-file-name "dashboard.org" user-emacs-directory)))
    (if (file-exists-p dashboard-file)
        (find-file dashboard-file)
      (message "Dashboard file not found: %s" dashboard-file))))

(defun create-scratch-buffer ()
  "Create or switch to persistent org-mode scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*")
  (unless (eq major-mode 'org-mode)
    (org-mode)))

;; Key bindings for dashboard and scratch
(global-set-key (kbd "C-c d") 'open-dashboard)      ; Quick access to dashboard
(global-set-key (kbd "C-c C-d") 'open-dashboard)    ; Alternative dashboard access
(global-set-key (kbd "C-c s c") 'create-scratch-buffer)

;; Basic UI cleanup
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; Show line numbers
(global-display-line-numbers-mode 1)

;; Disable annoying audible bell
(setq ring-bell-function 'ignore)              ; Completely disable bell
(setq visible-bell nil)                        ; No visual bell either (clean)
#+END_SRC

** File Management
Prevent Emacs from creating clutter files like backups and auto-saves.

#+BEGIN_SRC emacs-lisp
;; Backup and auto-save settings - no clutter files
(setq make-backup-files nil)            ; No backup files (file~)
(setq auto-save-default nil)            ; No auto-save files (#file#)
(setq create-lockfiles nil)             ; No lock files (.#file)
#+END_SRC

** Editing Defaults
Basic editing preferences for consistent code style.

#+BEGIN_SRC emacs-lisp
;; Basic editing
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

* Package Management
** Repository Setup
Configure package repositories and disable signature verification for Windows compatibility.

#+BEGIN_SRC emacs-lisp
;; Package management
(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))

;; Disable package signature verification to avoid GPG issues
(setq package-check-signature nil)

(package-initialize)

;; Refresh package contents only if needed (to speed up startup)
(when (not package-archive-contents)
  (package-refresh-contents))
#+END_SRC

** Theme Installation
Install and configure the voidlight theme for comfortable dark coding.

#+BEGIN_SRC emacs-lisp
;; Download and install voidlight theme manually from GitHub
(let ((theme-dir (expand-file-name "themes" user-emacs-directory))
      (theme-file (expand-file-name "themes/voidlight-theme.el" user-emacs-directory)))

  ;; Create themes directory if it doesn't exist
  (unless (file-directory-p theme-dir)
    (make-directory theme-dir t))

  ;; Download theme file if it doesn't exist
  (unless (file-exists-p theme-file)
    (url-copy-file "https://raw.githubusercontent.com/christerso/emacs-voidlight-theme/main/voidlight-theme.el"
                   theme-file t))

  ;; Add themes directory to custom theme load path
  (add-to-list 'custom-theme-load-path theme-dir)

  ;; Load the voidlight theme
  (load-theme 'voidlight t))
#+END_SRC

** Claude Code Integration
Install and configure claude-code.el for enhanced AI integration.

#+BEGIN_SRC emacs-lisp
;; Download and install claude-code.el from GitHub
(let ((claude-code-dir (expand-file-name "claude-code" user-emacs-directory))
      (claude-code-file (expand-file-name "claude-code/claude-code.el" user-emacs-directory)))

  ;; Create claude-code directory if it doesn't exist
  (unless (file-directory-p claude-code-dir)
    (make-directory claude-code-dir t))

  ;; Download claude-code.el if it doesn't exist
  (unless (file-exists-p claude-code-file)
    (message "Downloading claude-code.el from GitHub...")
    (url-copy-file "https://raw.githubusercontent.com/stevemolitor/claude-code.el/main/claude-code.el"
                   claude-code-file t))

  ;; Add claude-code directory to load path
  (add-to-list 'load-path claude-code-dir)

  ;; Load claude-code if available
  (when (file-exists-p claude-code-file)
    (condition-case err
        (progn
          (require 'claude-code)

          ;; Configure claude-code for Windows compatibility
          (when (eq system-type 'windows-nt)
            ;; Add Windows-specific configuration after claude-code loads
            (with-eval-after-load 'claude-code
              ;; Set up alternative backends if eat fails
              (when (boundp 'claude-code-terminal-backend)
                (message "Configuring claude-code terminal backend..."))))

          (message "claude-code.el loaded successfully"))
      (error
       (message "Error loading claude-code.el: %s" (error-message-string err))))))
#+END_SRC

** Font Configuration
Configure a beautiful Nerd Font for optimal programming experience with icons and ligatures.

#+BEGIN_SRC emacs-lisp
;; Font customization function - stand on a font and open customize options
(defun customize-font-at-point ()
  "Open customize options for the font at point."
  (interactive)
  (let* ((face-prop (get-char-property (point) 'face))
         (face-name (cond
                     ;; Handle list of faces
                     ((listp face-prop) (car face-prop))
                     ;; Handle single face
                     ((symbolp face-prop) face-prop)
                     ;; Handle face attributes (like :foreground)
                     ((keywordp face-prop) 'default)
                     ;; Fallback to face-at-point
                     (t (face-at-point t)))))
    ;; Ensure we have a valid face symbol
    (when (or (not face-name) (keywordp face-name) (not (symbolp face-name)))
      (setq face-name 'default))
    (message "Customizing font for face: %s" face-name)
    (customize-face face-name)))

;; Key binding for font customization at point
(global-set-key (kbd "C-c C-f") 'customize-font-at-point)

;; AGGRESSIVE JETBRAINS FONT ENFORCEMENT
;; This ensures JetBrains Mono Nerd Font is used everywhere without exception

(defvar my-protected-face-patterns
  '("icon" "treemacs" "all-the-icons" "nerd-icons" "dired-directory"
    "magit-diff" "git-gutter" "flycheck" "company-tooltip" "lsp-ui"
    "rainbow-delimiters" "hl-line" "region" "isearch" "lazy-highlight"
    "show-paren" "cursor" "fringe" "vertical-border")
  "Face name patterns that should not be modified by font enforcement.
These faces often contain special symbols, icons, or UI elements.")

(defun my-face-should-be-protected-p (face-name)
  "Return t if FACE-NAME should be protected from font changes."
  (let ((face-str (symbol-name face-name)))
    (cl-some (lambda (pattern)
               (string-match-p pattern face-str))
             my-protected-face-patterns)))

(defun force-jetbrains-font-selectively ()
  "Enforce JetBrains Mono font only on text faces, preserving special symbols."
  (when (member "JetBrainsMono Nerd Font" (font-family-list))
    ;; Core text faces - always safe to change
    (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font" :height 110)
    (set-face-attribute 'fixed-pitch nil :family "JetBrainsMono Nerd Font" :height 110)
    (set-face-attribute 'variable-pitch nil :family "JetBrainsMono Nerd Font" :height 110)

    ;; Mode line (safe for text content)
    (set-face-attribute 'mode-line nil :family "JetBrainsMono Nerd Font" :height 100)
    (set-face-attribute 'mode-line-inactive nil :family "JetBrainsMono Nerd Font" :height 100)
    (set-face-attribute 'header-line nil :family "JetBrainsMono Nerd Font" :height 110)
    (set-face-attribute 'minibuffer-prompt nil :family "JetBrainsMono Nerd Font" :height 110)

    ;; Programming language faces (safe - just text styling)
    (dolist (face '(font-lock-comment-face font-lock-string-face font-lock-keyword-face
                    font-lock-function-name-face font-lock-variable-name-face
                    font-lock-type-face font-lock-constant-face font-lock-builtin-face
                    font-lock-preprocessor-face font-lock-doc-face))
      (when (facep face)
        (set-face-attribute face nil :family "JetBrainsMono Nerd Font")))

    ;; Odin-specific faces (if they exist)
    (dolist (face '(odin-font-lock-keyword-face odin-font-lock-type-face
                    odin-font-lock-builtin-face odin-font-lock-constant-face))
      (when (facep face)
        (set-face-attribute face nil :family "JetBrainsMono Nerd Font")))

    ;; Text mode faces (safe)
    (dolist (face '(org-block org-code org-verbatim markdown-code-face
                    markdown-inline-code-face markdown-pre-face))
      (when (and (facep face) (not (my-face-should-be-protected-p face)))
        (set-face-attribute face nil :family "JetBrainsMono Nerd Font")))

    ;; Compilation faces (safe - just text)
    (dolist (face '(compilation-info compilation-error compilation-warning
                    compilation-line-number compilation-column-number))
      (when (facep face)
        (set-face-attribute face nil :family "JetBrainsMono Nerd Font")))

    ;; Help faces (safe - documentation text)
    (dolist (face '(help-key-binding help-argument-name))
      (when (facep face)
        (set-face-attribute face nil :family "JetBrainsMono Nerd Font")))

    ;; Only safe dired faces (avoid file icons)
    (when (facep 'dired-header)
      (set-face-attribute 'dired-header nil :family "JetBrainsMono Nerd Font"))

    ;; Terminal faces (safe - just text)
    (dolist (face '(term ansi-term))
      (when (facep face)
        (set-face-attribute face nil :family "JetBrainsMono Nerd Font")))

    ;; Completion text (but avoid tooltip styling)
    (when (and (facep 'completions-common-part)
               (not (my-face-should-be-protected-p 'completions-common-part)))
      (set-face-attribute 'completions-common-part nil :family "JetBrainsMono Nerd Font"))

    (message "JetBrains Mono font applied selectively (preserving app-specific fonts)")))

;; Apply selective font enforcement immediately and after package loads
(force-jetbrains-font-selectively)

;; Selective font protection - re-enforce after any package loads
(add-hook 'after-load-functions
          (lambda (feature)
            (force-jetbrains-font-selectively)))

;; Re-enforce fonts after theme loads
(add-hook 'after-init-hook 'force-jetbrains-font-selectively)

;; Periodic font enforcement (less aggressive)
(run-with-idle-timer 10 t 'force-jetbrains-font-selectively)

;; Set default font to JetBrains Mono Nerd Font with Unicode support
(when (member "JetBrainsMono Nerd Font" (font-family-list))
  (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font" :height 110)
  (set-face-attribute 'fixed-pitch nil :family "JetBrainsMono Nerd Font" :height 110)

  ;; COMPREHENSIVE UNICODE AND FONT SYSTEM
  ;; This ensures perfect rendering of all characters and symbols

  ;; Enable UTF-8 everywhere first
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;; Force Unicode display optimizations
  (setq inhibit-compacting-font-caches t)      ; Never compact font caches
  (setq use-default-font-for-symbols nil)      ; Always use fontset for symbols
  (setq w32-enable-unicode-output t)           ; Enable Unicode output on Windows
  (setq bidi-paragraph-direction 'left-to-right) ; Optimize for LTR text

  ;; Primary font: JetBrains Mono Nerd Font for everything possible
  (set-fontset-font t 'unicode "JetBrainsMono Nerd Font" nil 'prepend)

  ;; Unicode ranges with perfect fallback chain
  ;; Basic Latin and extensions - JetBrains first
  (set-fontset-font t '(#x0000 . #x024F) "JetBrainsMono Nerd Font" nil 'prepend)
  (set-fontset-font t '(#x0000 . #x024F) "Cascadia Code" nil 'append)
  (set-fontset-font t '(#x0000 . #x024F) "Consolas" nil 'append)

  ;; Mathematical symbols and operators
  (set-fontset-font t '(#x2190 . #x21FF) "JetBrainsMono Nerd Font" nil 'prepend) ; Arrows
  (set-fontset-font t '(#x2200 . #x22FF) "JetBrainsMono Nerd Font" nil 'prepend) ; Math operators
  (set-fontset-font t '(#x2300 . #x23FF) "JetBrainsMono Nerd Font" nil 'prepend) ; Technical symbols
  (set-fontset-font t '(#x25A0 . #x25FF) "JetBrainsMono Nerd Font" nil 'prepend) ; Geometric shapes

  ;; Programming and technical symbols
  (set-fontset-font t '(#xE000 . #xF8FF) "JetBrainsMono Nerd Font" nil 'prepend) ; Private use (Nerd Font icons)
  (set-fontset-font t '(#xF0000 . #xFFFFF) "JetBrainsMono Nerd Font" nil 'prepend) ; More private use

  ;; Fallback for symbols JetBrains doesn't have
  (set-fontset-font t '(#x2000 . #x2FFF) "Segoe UI Symbol" nil 'append)  ; General punctuation & symbols
  (set-fontset-font t '(#x2600 . #x26FF) "Segoe UI Symbol" nil 'append)  ; Miscellaneous symbols
  (set-fontset-font t '(#x2700 . #x27BF) "Segoe UI Symbol" nil 'append)  ; Dingbats
  (set-fontset-font t '(#x2B00 . #x2BFF) "Segoe UI Symbol" nil 'append)  ; Misc symbols and arrows

  ;; Emoji support (high priority)
  (set-fontset-font t '(#x1F000 . #x1FFFF) "Segoe UI Emoji" nil 'append) ; All emoji blocks
  (set-fontset-font t '(#x1F300 . #x1F5FF) "Segoe UI Emoji" nil 'append) ; Misc symbols and pictographs
  (set-fontset-font t '(#x1F600 . #x1F64F) "Segoe UI Emoji" nil 'append) ; Emoticons
  (set-fontset-font t '(#x1F680 . #x1F6FF) "Segoe UI Emoji" nil 'append) ; Transport and map
  (set-fontset-font t '(#x1F700 . #x1F77F) "Segoe UI Emoji" nil 'append) ; Alchemical
  (set-fontset-font t '(#x1F780 . #x1F7FF) "Segoe UI Emoji" nil 'append) ; Geometric shapes ext
  (set-fontset-font t '(#x1F800 . #x1F8FF) "Segoe UI Emoji" nil 'append) ; Supplemental arrows
  (set-fontset-font t '(#x1F900 . #x1F9FF) "Segoe UI Emoji" nil 'append) ; Supplemental symbols

  ;; Critical symbols that must work
  (set-fontset-font t ?✓ "Segoe UI Symbol" nil 'append)  ; Checkmark
  (set-fontset-font t ?✅ "Segoe UI Emoji" nil 'append)   ; Check mark button
  (set-fontset-font t ?❌ "Segoe UI Emoji" nil 'append)   ; Cross mark
  (set-fontset-font t ?⚠ "Segoe UI Symbol" nil 'append)   ; Warning sign
  (set-fontset-font t ?→ "JetBrainsMono Nerd Font" nil 'prepend) ; Right arrow
  (set-fontset-font t ?← "JetBrainsMono Nerd Font" nil 'prepend) ; Left arrow
  (set-fontset-font t ?↑ "JetBrainsMono Nerd Font" nil 'prepend) ; Up arrow
  (set-fontset-font t ?↓ "JetBrainsMono Nerd Font" nil 'prepend) ; Down arrow
  (set-fontset-font t ?• "JetBrainsMono Nerd Font" nil 'prepend) ; Bullet
  (set-fontset-font t ?◦ "JetBrainsMono Nerd Font" nil 'prepend) ; White bullet

  ;; Final safety net for anything we missed
  (set-fontset-font t 'unicode "Symbola" nil 'append)     ; Comprehensive symbol font
  (set-fontset-font t 'unicode "DejaVu Sans" nil 'append) ; General fallback
  (set-fontset-font t 'unicode "Arial Unicode MS" nil 'append) ; Windows Unicode fallback

  ;; International character support
  (set-fontset-font t 'latin "JetBrainsMono Nerd Font" nil 'prepend)
  (set-fontset-font t 'greek "JetBrainsMono Nerd Font" nil 'prepend)
  (set-fontset-font t 'cyrillic "JetBrainsMono Nerd Font" nil 'prepend))

;; Fallback fonts if JetBrains Mono Nerd Font is not available
(unless (member "JetBrainsMono Nerd Font" (font-family-list))
  (cond
   ;; Try Cascadia Code (Windows 11 default, has ligatures)
   ((member "Cascadia Code" (font-family-list))
    (set-face-attribute 'default nil :family "Cascadia Code" :height 110))
   ;; Try Fira Code (popular programming font)
   ((member "Fira Code" (font-family-list))
    (set-face-attribute 'default nil :family "Fira Code" :height 110))
   ;; Fallback to Consolas (Windows default monospace)
   ((member "Consolas" (font-family-list))
    (set-face-attribute 'default nil :family "Consolas" :height 110))))
#+END_SRC

* Development Environment
** Windows PATH Configuration
Set up the Windows environment to find clangd and other development tools.

#+BEGIN_SRC emacs-lisp
;; PATH setup for Windows
(when (eq system-type 'windows-nt)
  (setenv "PATH" (concat "C:\\Program Files\\LLVM\\bin;"
                         "C:\\Users\\chris\\go\\bin;"
                         "G:\\repos\\Odin;"
                         (getenv "PATH")))
  (setq exec-path (append '("C:\\Program Files\\LLVM\\bin"
                           "C:\\Users\\chris\\go\\bin"
                           "G:\\repos\\Odin")
                         exec-path)))
#+END_SRC

** LSP Configuration with Eglot
Configure Eglot (built-in LSP client) for C development with clangd.
Automatically starts when opening C files.

#+BEGIN_SRC emacs-lisp
;; Eglot LSP setup
(require 'eglot)

;; Configure clangd for C files
(add-to-list 'eglot-server-programs '(c-mode . ("clangd")))

;; Automatically start Eglot for C files
(add-hook 'c-mode-hook 'eglot-ensure)

;; Disable problematic flymake backends completely (we use Eglot for diagnostics)
(with-eval-after-load 'flymake
  (setq flymake-cc-command nil)                           ; Disable flymake-cc command
  (remove-hook 'flymake-diagnostic-functions 'flymake-cc) ; Remove from functions
  (when (fboundp 'flymake-cc)
    (fmakunbound 'flymake-cc)))                           ; Remove function entirely

;; Also disable flymake completely in C mode since we use Eglot
(add-hook 'c-mode-hook
          (lambda ()
            (flymake-mode -1)))  ; Disable flymake, use Eglot diagnostics instead

;; Automatic file headers
(defun insert-c-header ()
  "Insert standard C file header for new files."
  (when (and (buffer-file-name)
             (= (point-min) (point-max))  ; Empty file
             (string-match-p "\\.\\(c\\|h\\)$" (buffer-file-name)))
    (let ((filename (file-name-nondirectory (buffer-file-name)))
          (is-header (string-match-p "\\.h$" (buffer-file-name))))
      (insert (format "/**\n"))
      (insert (format " * @file %s\n" filename))
      (insert (format " * @brief \n"))
      (insert (format " * @author Christer Söderlund <christer.soderlund@gmail.com>\n"))
      (insert (format " * @date %s\n" (format-time-string "%Y-%m-%d")))
      (insert (format " * @copyright Copyright (c) %s Christer Söderlund\n" (format-time-string "%Y")))
      (insert (format " */\n\n"))

      (when is-header
        (let ((guard-name (upcase (replace-regexp-in-string "[^a-zA-Z0-9]" "_"
                                                           (file-name-sans-extension filename)))))
          (insert (format "#ifndef %s_H\n" guard-name))
          (insert (format "#define %s_H\n\n" guard-name))
          (insert "#ifdef __cplusplus\n")
          (insert "extern \"C\" {\n")
          (insert "#endif\n\n")
          (insert "// Header content here\n\n")
          (insert "#ifdef __cplusplus\n")
          (insert "}\n")
          (insert "#endif\n\n")
          (insert (format "#endif // %s_H\n" guard-name))))

      (goto-char (point-min))
      (search-forward "@brief ")
      (message "C header inserted - fill in @brief description"))))

(defun insert-go-header ()
  "Insert standard Go file header for new files."
  (when (and (buffer-file-name)
             (= (point-min) (point-max))  ; Empty file
             (string-match-p "\\.go$" (buffer-file-name)))
    (let ((filename (file-name-nondirectory (buffer-file-name)))
          (package-name (file-name-nondirectory (directory-file-name default-directory))))
      (insert (format "// Package %s \n" package-name))
      (insert (format "// File: %s\n" filename))
      (insert (format "// Author: Christer Söderlund <christer.soderlund@gmail.com>\n"))
      (insert (format "// Date: %s\n" (format-time-string "%Y-%m-%d")))
      (insert (format "// Copyright (c) %s Christer Söderlund\n\n" (format-time-string "%Y")))
      (insert (format "package %s\n\n" package-name))
      (goto-char (point-min))
      (search-forward "Package ")
      (message "Go header inserted - fill in package description"))))
#+END_SRC

** C Language Settings
Configure C-specific editing preferences and style.

#+BEGIN_SRC emacs-lisp
;; C-specific settings
(add-hook 'c-mode-hook
          (lambda ()
            (setq c-default-style "k&r")
            (setq c-basic-offset 2)    ; Use 2 spaces for C (more standard)
            ;; Insert header for new files
            (insert-c-header)
            ;; Auto-format C files when opened (after brief delay)
            (run-with-idle-timer 0.5 nil 'format-buffer)))  ; Format after 0.5s delay

;; Autoformatting with clang-format
(defun format-buffer ()
  "Format the current buffer using clang-format with C-specific style."
  (interactive)
  (when (eq major-mode 'c-mode)
    (let ((start-point (point))
          (start-line (line-number-at-pos))
          (original-content (buffer-string)))
      (condition-case err
          (progn
            (let ((formatted-content
                   (with-temp-buffer
                     (insert original-content)
                     (let ((exit-code (call-process-region (point-min) (point-max)
                                                          "clang-format" t t nil
                                                          "--style={BasedOnStyle: Google, ColumnLimit: 120, IndentWidth: 2}"
                                                          "--assume-filename=.c")))
                       (if (= exit-code 0)
                           (buffer-string)
                         (error "clang-format failed with exit code %d" exit-code))))))
              (erase-buffer)
              (insert formatted-content)
              (goto-line start-line)
              (message "Buffer formatted with clang-format")))
        (error
         (erase-buffer)
         (insert original-content)
         (goto-char start-point)
         (message "Formatting failed, buffer restored: %s" (error-message-string err)))))))

;; Format current file and save
(defun format-and-save ()
  "Format the current buffer and save it."
  (interactive)
  (format-buffer)
  (save-buffer)
  (message "File formatted and saved"))

;; Format on save (optional - uncomment if you want auto-format on save)
;; (add-hook 'c-mode-hook
;;           (lambda ()
;;             (add-hook 'before-save-hook 'format-buffer nil t)))

;; Key bindings for C formatting (mode-specific to avoid conflicts)
(add-hook 'c-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c f") 'format-buffer)
            (local-set-key (kbd "C-c F") 'format-and-save)))

;; Auto-close compilation window on success, keep open on failure
(defun my-compilation-finish-function (buffer status)
  "Close compilation buffer if successful, keep open if failed."
  (let ((window (get-buffer-window buffer)))
    (cond
     ;; Success - close window after brief delay
     ((string-match "finished" status)
      (run-with-timer 1.0 nil
                      (lambda ()
                        (when (get-buffer-window buffer)
                          (delete-window (get-buffer-window buffer)))
                        (message "Build successful - compilation window closed"))))
     ;; Failure - keep window open and show message
     ((string-match "exited abnormally" status)
      (message "Build failed - check compilation buffer for errors"))
     ;; Other statuses - do nothing
     (t nil))))

(add-hook 'compilation-finish-functions 'my-compilation-finish-function)

;; Better compilation window behavior
(setq compilation-window-height 15)           ; Reasonable window height
(setq compilation-scroll-output 'first-error) ; Scroll to first error
#+END_SRC

** Go Language Settings
Configure Go development with gopls LSP and modern tooling.

#+BEGIN_SRC emacs-lisp
;; Go mode
(unless (package-installed-p 'go-mode)
  (package-install 'go-mode))

(require 'go-mode)

;; Configure gopls for Go files
(add-to-list 'eglot-server-programs '(go-mode . ("gopls")))

;; Automatically start Eglot for Go files
(add-hook 'go-mode-hook 'eglot-ensure)

;; Go-specific settings
(add-hook 'go-mode-hook
          (lambda ()
            (setq tab-width 4)                    ; Go uses tabs, 4-space width
            (setq indent-tabs-mode t)             ; Use actual tabs for Go
            (setq go-ts-mode-indent-offset 4)     ; Consistent indentation
            ;; Insert header for new Go files
            (insert-go-header)))

;; Go formatting with goimports (better than gofmt)
(defun go-format-buffer ()
  "Format Go buffer with goimports."
  (interactive)
  (when (eq major-mode 'go-mode)
    (let ((start-point (point))
          (start-line (line-number-at-pos))
          (original-content (buffer-string)))
      (condition-case err
          (progn
            (let ((formatted-content
                   (with-temp-buffer
                     (insert original-content)
                     (let ((exit-code (call-process-region (point-min) (point-max)
                                                          "goimports" t t nil)))
                       (if (= exit-code 0)
                           (buffer-string)
                         (error "goimports failed with exit code %d" exit-code))))))
              (erase-buffer)
              (insert formatted-content)
              (goto-line start-line)
              (message "Go buffer formatted with goimports")))
        (error
         (erase-buffer)
         (insert original-content)
         (goto-char start-point)
         (message "Go formatting failed, buffer restored: %s" (error-message-string err)))))))

;; Go format and save
(defun go-format-and-save ()
  "Format Go buffer and save it."
  (interactive)
  (go-format-buffer)
  (save-buffer))

;; Key bindings for Go formatting
(define-key go-mode-map (kbd "C-c f") 'go-format-buffer)    ; Format Go buffer
(define-key go-mode-map (kbd "C-c F") 'go-format-and-save)  ; Format and save

;; Auto-format Go files on save (optional - uncomment if desired)
;; (add-hook 'go-mode-hook
;;           (lambda ()
;;             (add-hook 'before-save-hook 'go-format-buffer nil t)))
#+END_SRC

** Odin Language Settings
Configure Odin development with ols LSP and modern tooling.

#+BEGIN_SRC emacs-lisp
;; Download and install proper odin-mode from GitHub
(let ((odin-mode-dir (expand-file-name "odin-mode" user-emacs-directory))
      (odin-mode-file (expand-file-name "odin-mode/odin-mode.el" user-emacs-directory)))
  (unless (file-exists-p odin-mode-file)
    (message "Downloading odin-mode from GitHub...")
    (make-directory odin-mode-dir t)
    (url-copy-file "https://raw.githubusercontent.com/mattt-b/odin-mode/master/odin-mode.el"
                   odin-mode-file t))

  ;; Load the odin-mode
  (load-file odin-mode-file)
  (require 'odin-mode))

;; Configure ols (Odin Language Server) for Odin files
(add-to-list 'eglot-server-programs '(odin-mode . ("ols")))

;; Automatically start Eglot for Odin files
(add-hook 'odin-mode-hook 'eglot-ensure)

;; Odin-specific settings with AGGRESSIVE Unicode and font support
(add-hook 'odin-mode-hook
          (lambda ()
            (setq tab-width 4)                    ; Odin uses 4-space tabs
            (setq indent-tabs-mode t)             ; Use actual tabs for Odin
            (setq c-basic-offset 4)               ; 4-space indentation

            ;; Insert header for new Odin files first
            (insert-odin-header)

            ;; NUCLEAR FONT AND UNICODE ENFORCEMENT - runs after mode is set up
            (run-with-idle-timer 0.1 nil
              (lambda ()
                (with-current-buffer (current-buffer)
                  (when (eq major-mode 'odin-mode)
                    ;; Force UTF-8 encoding aggressively
                    (set-buffer-file-coding-system 'utf-8-unix)
                    (setq buffer-file-coding-system 'utf-8-unix)
                    (prefer-coding-system 'utf-8)

                    ;; FORCE JetBrains font on ALL Odin font-lock faces
                    (when (member "JetBrainsMono Nerd Font" (font-family-list))
                      ;; Override ALL odin font-lock faces
                      (dolist (face '(font-lock-keyword-face font-lock-type-face
                                      font-lock-function-name-face font-lock-variable-name-face
                                      font-lock-constant-face font-lock-builtin-face
                                      font-lock-string-face font-lock-comment-face
                                      font-lock-preprocessor-face font-lock-doc-face))
                        (when (facep face)
                          (set-face-attribute face nil :family "JetBrainsMono Nerd Font" :height 110)))

                      ;; Force buffer-specific font (nuclear option)
                      (setq buffer-face-mode-face '(:family "JetBrainsMono Nerd Font" :height 110))
                      (buffer-face-mode 1)

                      ;; Force fontset configuration for Unicode
                      (set-fontset-font t 'unicode "JetBrainsMono Nerd Font" nil 'prepend)
                      (set-fontset-font t 'unicode "Segoe UI Symbol" nil 'append)
                      (set-fontset-font t 'unicode "Segoe UI Emoji" nil 'append)

                      ;; Force font for specific Unicode ranges that might fail
                      (set-fontset-font t '(#x2190 . #x21FF) "JetBrainsMono Nerd Font" nil 'prepend) ; Arrows
                      (set-fontset-font t '(#x2200 . #x22FF) "JetBrainsMono Nerd Font" nil 'prepend) ; Math
                      (set-fontset-font t '(#x2500 . #x257F) "JetBrainsMono Nerd Font" nil 'prepend) ; Box drawing
                      (set-fontset-font t '(#x2600 . #x26FF) "Segoe UI Symbol" nil 'append)         ; Misc symbols

                      ;; Force redisplay
                      (redraw-display)
                      (font-lock-fontify-buffer)

                      (message "🚀 NUCLEAR Unicode and font enforcement applied to Odin mode"))))))))

;; Odin formatting with odinfmt
(defun odin-format-buffer ()
  "Format Odin buffer with odinfmt."
  (interactive)
  (when (eq major-mode 'odin-mode)
    (let ((start-point (point))
          (start-line (line-number-at-pos))
          (original-content (buffer-string)))
      (condition-case err
          (progn
            (let ((formatted-content
                   (with-temp-buffer
                     (insert original-content)
                     (let ((exit-code (call-process-region (point-min) (point-max)
                                                          "odinfmt" t t nil
                                                          "-stdin")))
                       (if (= exit-code 0)
                           (buffer-string)
                         (error "odinfmt failed with exit code %d" exit-code))))))
              (erase-buffer)
              (insert formatted-content)
              (goto-line start-line)
              (message "Odin buffer formatted with odinfmt")))
        (error
         (erase-buffer)
         (insert original-content)
         (goto-char start-point)
         (message "Odin formatting failed, buffer restored: %s" (error-message-string err)))))))

;; Odin format and save
(defun odin-format-and-save ()
  "Format Odin buffer and save it."
  (interactive)
  (odin-format-buffer)
  (save-buffer))

;; Key bindings for Odin formatting
(define-key odin-mode-map (kbd "C-c f") 'odin-format-buffer)    ; Format Odin buffer
(define-key odin-mode-map (kbd "C-c F") 'odin-format-and-save)  ; Format and save

;; Odin file header function
(defun insert-odin-header ()
  "Insert standard Odin file header for new files."
  (when (and (buffer-file-name)
             (= (point-min) (point-max))  ; Empty file
             (string-match-p "\\.odin$" (buffer-file-name)))
    (let ((filename (file-name-nondirectory (buffer-file-name)))
          (package-name (file-name-nondirectory (directory-file-name default-directory))))
      (insert (format "// Package %s\n" package-name))
      (insert (format "// File: %s\n" filename))
      (insert (format "// Author: Christer Söderlund <christer.soderlund@gmail.com>\n"))
      (insert (format "// Date: %s\n" (format-time-string "%Y-%m-%d")))
      (insert (format "// Copyright (c) %s Christer Söderlund\n\n" (format-time-string "%Y")))
      (insert (format "package %s\n\n" package-name))
      (insert "import \"core:fmt\"\n\n")
      (insert "main :: proc() {\n")
      (insert "    fmt.println(\"Hello, Odin!\")\n")
      (insert "}\n")
      (goto-char (point-min))
      (search-forward "Package ")
      (message "Odin header inserted - fill in package description"))))

;; Comprehensive Unicode diagnostic and fix for Odin mode
(defun diagnose-odin-unicode-simple ()
  "Diagnose and fix Unicode issues in Odin mode with detailed reporting."
  (interactive)
  (when (eq major-mode 'odin-mode)
    (let ((issues '())
          (fixes '()))

      ;; Check current encoding
      (let ((current-encoding buffer-file-coding-system))
        (message "Current encoding: %s" current-encoding)
        (unless (memq current-encoding '(utf-8 utf-8-unix utf-8-dos))
          (push "Non-UTF-8 encoding detected" issues)
          (set-buffer-file-coding-system 'utf-8-unix)
          (push "Forced UTF-8 encoding" fixes)))

      ;; Check current font
      (let ((current-font (face-attribute 'default :family)))
        (message "Current font: %s" current-font)
        (unless (string= current-font "JetBrainsMono Nerd Font")
          (push "Non-JetBrains font detected" issues)
          (when (member "JetBrainsMono Nerd Font" (font-family-list))
            (setq buffer-face-mode-face '(:family "JetBrainsMono Nerd Font" :height 110))
            (buffer-face-mode 1)
            (push "Forced JetBrains font" fixes))))

      ;; Check fontset configuration
      (let ((unicode-font (fontset-font t #x2192))) ; Right arrow
        (message "Unicode arrow font: %s" unicode-font)
        (unless (and unicode-font (string-match "JetBrains\\|Segoe" (symbol-name unicode-font)))
          (push "Unicode fontset not configured" issues)
          ;; Reconfigure fontset
          (set-fontset-font t 'unicode "JetBrainsMono Nerd Font" nil 'prepend)
          (set-fontset-font t 'unicode "Segoe UI Symbol" nil 'append)
          (set-fontset-font t 'unicode "Segoe UI Emoji" nil 'append)
          (push "Reconfigured Unicode fontset" fixes)))

      ;; Force font-lock refresh
      (font-lock-fontify-buffer)
      (redraw-display)
      (push "Refreshed display" fixes)

      ;; Report results
      (if issues
          (message "🔧 Issues found: %s | Fixes applied: %s"
                   (string-join issues ", ") (string-join fixes ", "))
        (message "✅ No Unicode issues detected in Odin mode"))

      ;; Insert test Unicode characters for verification
      (when (and (called-interactively-p 'interactive) (not buffer-read-only))
        (save-excursion
          (goto-char (point-max))
          (insert "\n// Unicode test: → ← ↑ ↓ • ✓ ≠ ≤ ≥ α β γ λ π\n")
          (message "Test Unicode characters inserted at end of buffer")))))

;; Enhanced manual fix function
(defun fix-odin-unicode ()
  "Manually fix Unicode and font issues in current Odin buffer."
  (interactive)
  (diagnose-odin-unicode-simple))

;; Add keybinding for manual Unicode fix
(define-key odin-mode-map (kbd "C-c u") 'fix-odin-unicode)

;; Auto-format Odin files on save (optional - uncomment if desired)
;; (add-hook 'odin-mode-hook
;;           (lambda ()
;;             (add-hook 'before-save-hook 'odin-format-buffer nil t)))
#+END_SRC

* Build System Integration
** Dream Project Build & Run Commands
Quick build, run, and debug functions for the Dream project.

#+BEGIN_SRC emacs-lisp
;; Smart build command - detects project type
(defun smart-build ()
  "Build project using appropriate build system based on project type."
  (interactive)
  (let* ((project-root (or (condition-case nil (projectile-project-root) (error nil))
                          default-directory))
         (cmake-file (expand-file-name "CMakeLists.txt" project-root))
         (go-mod-file (expand-file-name "go.mod" project-root))
         (go-files (directory-files project-root nil "\\.go$"))
         (odin-files (directory-files project-root nil "\\.odin$")))

    (cond
     ;; CMake project (like Dream)
     ((file-exists-p cmake-file)
      (let ((default-directory project-root))
        (compile "cmake --build build --config Release")))

     ;; Go project with go.mod
     ((file-exists-p go-mod-file)
      (let ((default-directory project-root))
        (compile "go build -v ./...")))

     ;; Go files without go.mod (single file)
     ((and go-files (eq major-mode 'go-mode))
      (let ((current-file (buffer-file-name)))
        (compile (format "go build -v %s" (file-name-nondirectory current-file)))))

     ;; Odin project or single file
     ((or odin-files (eq major-mode 'odin-mode))
      (let ((default-directory project-root))
        (if (> (length odin-files) 1)
            (compile "odin build . -out:main")  ; Build entire package
          (let ((current-file (buffer-file-name)))
            (compile (format "odin build %s -file -out:%s"
                            (file-name-nondirectory current-file)
                            (file-name-sans-extension (file-name-nondirectory current-file))))))))

     ;; C file without CMake (single file compile)
     ((eq major-mode 'c-mode)
      (let ((current-file (buffer-file-name)))
        (compile (format "clang -std=c11 -o %s %s"
                        (file-name-sans-extension (file-name-nondirectory current-file))
                        (file-name-nondirectory current-file)))))

     ;; Default fallback
     (t
      (message "No recognized build system found in project")))))

;; Keep dream-specific build for explicit use
(defun dream-build ()
  "Build the dream project using CMake."
  (interactive)
  (let ((default-directory "G:/repos/dream/"))
    (compile "cmake --build build --config Release --target dream")))

;; Smart run command - detects project type and runs appropriately
(defun smart-run ()
  "Run project using appropriate method based on project type."
  (interactive)
  (let* ((project-root (or (condition-case nil (projectile-project-root) (error nil))
                          default-directory))
         (cmake-file (expand-file-name "CMakeLists.txt" project-root))
         (go-mod-file (expand-file-name "go.mod" project-root))
         (go-files (directory-files project-root nil "\\.go$"))
         (odin-files (directory-files project-root nil "\\.odin$")))

    (cond
     ;; Dream CMake project (specific handling)
     ((and (file-exists-p cmake-file)
           (string-match-p "dream" project-root))
      (let ((exe-path (expand-file-name "build/Release/dream.exe" project-root)))
        (if (file-exists-p exe-path)
            (let ((default-directory project-root))
              (async-shell-command exe-path "*Dream Output*"))
          (message "Dream executable not found. Build first with F3."))))

     ;; Generic CMake project
     ((file-exists-p cmake-file)
      (let* ((build-dir (expand-file-name "build" project-root))
             (exe-files (when (file-directory-p build-dir)
                         (directory-files-recursively build-dir "\\.exe$"))))
        (if exe-files
            (let ((exe-to-run (car exe-files)))  ; Use first executable found
              (async-shell-command exe-to-run "*CMake Output*"))
          (message "No executable found. Build first with F3."))))

     ;; Go project with go.mod
     ((file-exists-p go-mod-file)
      (let ((default-directory project-root))
        (async-shell-command "go run ." "*Go Output*")))

     ;; Single Go file
     ((and go-files (eq major-mode 'go-mode))
      (let ((current-file (buffer-file-name)))
        (async-shell-command (format "go run %s" (file-name-nondirectory current-file))
                             "*Go Output*")))

     ;; Odin project or single file
     ((or odin-files (eq major-mode 'odin-mode))
      (let ((default-directory project-root))
        (if (> (length odin-files) 1)
            (async-shell-command "odin run . -out:main" "*Odin Output*")  ; Run entire package
          (let ((current-file (buffer-file-name)))
            (async-shell-command (format "odin run %s -file -out:%s"
                                        (file-name-nondirectory current-file)
                                        (file-name-sans-extension (file-name-nondirectory current-file)))
                                "*Odin Output*")))))

     ;; Single C file
     ((eq major-mode 'c-mode)
      (let* ((current-file (buffer-file-name))
             (exe-name (file-name-sans-extension (file-name-nondirectory current-file))))
        (if (file-exists-p (concat exe-name ".exe"))
            (async-shell-command (format "./%s.exe" exe-name) "*C Output*")
          (message "Executable not found. Build first with F3."))))

     ;; Default fallback
     (t
      (message "No recognized run method for current project")))))

;; Smart debug command - detects project type and debugs appropriately
(defun smart-debug ()
  "Debug project using appropriate debugger based on project type."
  (interactive)
  (let* ((project-root (or (condition-case nil (projectile-project-root) (error nil))
                          default-directory))
         (cmake-file (expand-file-name "CMakeLists.txt" project-root))
         (go-mod-file (expand-file-name "go.mod" project-root))
         (odin-files (directory-files project-root nil "\\.odin$"))
         (remedybg-path "C:/remedybg.exe"))

    (cond
     ;; Dream CMake project (RemedyBG)
     ((and (file-exists-p cmake-file)
           (string-match-p "dream" project-root))
      (let ((exe-path (expand-file-name "build/Release/dream.exe" project-root)))
        (if (file-exists-p exe-path)
            (if (file-exists-p remedybg-path)
                (async-shell-command (format "\"%s\" \"%s\"" remedybg-path exe-path))
              (message "RemedyBG not found at C:/remedybg.exe"))
          (message "Dream executable not found. Build first with F3."))))

     ;; Generic CMake project (try RemedyBG or Visual Studio)
     ((file-exists-p cmake-file)
      (let* ((build-dir (expand-file-name "build" project-root))
             (exe-files (when (file-directory-p build-dir)
                         (directory-files-recursively build-dir "\\.exe$"))))
        (if exe-files
            (let ((exe-to-debug (car exe-files)))
              (if (file-exists-p remedybg-path)
                  (async-shell-command (format "\"%s\" \"%s\"" remedybg-path exe-to-debug))
                (message "RemedyBG not found. Install for debugging support.")))
          (message "No executable found for debugging. Build first with F3."))))

     ;; Go project (use delve debugger)
     ((or (file-exists-p go-mod-file) (eq major-mode 'go-mode))
      (let ((default-directory project-root))
        (async-shell-command "dlv debug" "*Go Debug*")))

     ;; Odin project (use LLDB or RemedyBG for compiled executables)
     ((or odin-files (eq major-mode 'odin-mode))
      (let ((default-directory project-root)
            (exe-path (if (> (length odin-files) 1)
                         (expand-file-name "main.exe" project-root)
                       (expand-file-name (concat (file-name-sans-extension
                                                 (file-name-nondirectory (buffer-file-name))) ".exe")
                                        project-root))))
        (if (file-exists-p exe-path)
            (if (file-exists-p remedybg-path)
                (async-shell-command (format "\"%s\" \"%s\"" remedybg-path exe-path))
              (message "RemedyBG not found. Odin debugging requires external debugger."))
          (message "Odin executable not found. Build first with F3."))))

     ;; Default fallback
     (t
      (message "No recognized debug method for current project")))))

;; Dream functions moved to avoid duplication - using the ones defined earlier

;; Key bindings for build/run/debug workflow
(global-set-key [f3] 'smart-build)        ; F3 = Smart Build (detects project type)
(global-set-key [f4] 'smart-run)          ; F4 = Smart Run (detects project type)
(global-set-key [S-f4] 'smart-debug)      ; Shift+F4 = Smart Debug (detects project type)

;; Explicit Dream project functions (backup)
(global-set-key [f5] 'dream-build)        ; F5 = Dream-specific build
(global-set-key [f6] 'dream-run)          ; F6 = Dream-specific run
(global-set-key [S-f6] 'dream-debug)      ; Shift+F6 = Dream-specific debug
#+END_SRC

* Developer Tools
** Markdown Support
Enhanced markdown editing with live preview and toggle view.

#+BEGIN_SRC emacs-lisp
;; Markdown mode with live preview
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode))

(unless (package-installed-p 'markdown-preview-mode)
  (package-install 'markdown-preview-mode))

(unless (package-installed-p 'grip-mode)
  (package-install 'grip-mode))

(require 'markdown-mode)
(require 'markdown-preview-mode)
(require 'grip-mode)

;; File associations
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))

;; Markdown configuration - pandoc is now installed
(setq markdown-command "pandoc")  ; Use pandoc for high-quality rendering
(setq markdown-preview-style "github")  ; GitHub-style preview
(setq markdown-fontify-code-blocks-natively t)  ; Syntax highlight code blocks

;; Custom markdown preview function - fixed
(defun my-markdown-toggle-preview ()
  "Toggle between markdown source and rendered preview."
  (interactive)
  (if (get-buffer "*markdown-preview*")
      (markdown-preview-cleanup)  ; Close preview
    (markdown-preview)))         ; Open preview

;; GitHub-style preview with grip (requires GitHub token for unlimited use)
(defun my-markdown-grip-toggle ()
  "Toggle GitHub-style preview with grip."
  (interactive)
  (if grip-mode
      (grip-stop-preview)
    (grip-start-preview)))

;; Full-window markdown preview with q to quit
(defun my-markdown-split-preview ()
  "Show markdown preview in full window, press q to return."
  (interactive)
  (let ((preview-buffer "*Markdown Preview*")
        (source-buffer (current-buffer))
        (source-window-config (current-window-configuration)))

    ;; Store the source buffer and window configuration
    (setq markdown-preview-source-buffer source-buffer)
    (setq markdown-preview-window-config source-window-config)

    ;; Create and switch to preview buffer
    (switch-to-buffer (get-buffer-create preview-buffer))

    ;; Clear and populate preview buffer
    (let ((inhibit-read-only t))
      (erase-buffer)
      (let ((markdown-content (with-current-buffer source-buffer (buffer-string))))
        (insert markdown-content)
        (shell-command-on-region (point-min) (point-max) "pandoc -f markdown -t plain" t t)
        (goto-char (point-min))
        (deactivate-mark)))  ; Clear any selection/highlighting

    ;; Set up preview mode with colorization
    (text-mode)  ; Use text-mode as base
    (my-markdown-colorize-preview)  ; Add custom colorization
    (read-only-mode 1)
    (setq buffer-read-only t)
    (goto-char (point-min))  ; Ensure cursor at top
    (deactivate-mark)  ; Clear selection again

    ;; Local key bindings for preview
    (use-local-map (copy-keymap (current-local-map)))
    (local-set-key (kbd "q") 'my-markdown-preview-quit)
    (local-set-key (kbd "r") 'my-markdown-preview-refresh)

    (message "Markdown Preview - Press 'q' to quit, 'r' to refresh")))

;; Colorization function for markdown preview
(defun my-markdown-colorize-preview ()
  "Add colorization to the markdown preview buffer."
  (let ((inhibit-read-only t))
    (save-excursion
      ;; Enable font-lock mode for colorization
      (font-lock-mode 1)

      ;; Colorize function keywords (theme blue)
      (goto-char (point-min))
      (when (re-search-forward "\\(FUNCTION\\|function\\|def\\|struct\\)" nil t)
        (put-text-property (match-beginning 1) (match-end 1) 'face
                           '(:foreground "#569cd6" :weight bold)))

      ;; Colorize ALL CAPS words (light gray/white)
      (goto-char (point-min))
      (while (re-search-forward "\\b[A-Z][A-Z_]+[A-Z]\\b" nil t)
        (put-text-property (match-beginning 0) (match-end 0) 'face
                           '(:foreground "#d4d4d4" :weight bold)))

      ;; Colorize numbers (soft orange)
      (goto-char (point-min))
      (while (re-search-forward "\\b[0-9]+\\b" nil t)
        (put-text-property (match-beginning 0) (match-end 0) 'face
                           '(:foreground "#ce9178")))

      ;; Colorize code-like patterns (theme light blue)
      (goto-char (point-min))
      (while (re-search-forward "\\b[a-zA-Z_][a-zA-Z0-9_]*_[a-zA-Z0-9_]*\\b" nil t)
        (put-text-property (match-beginning 0) (match-end 0) 'face
                           '(:foreground "#9cdcfe" :family "JetBrainsMono Nerd Font")))

      ;; Colorize function calls (light white)
      (goto-char (point-min))
      (while (re-search-forward "\\b[a-zA-Z_][a-zA-Z0-9_]*(" nil t)
        (put-text-property (match-beginning 0) (1- (match-end 0)) 'face
                           '(:foreground "#dcdcdc" :family "JetBrainsMono Nerd Font")))

      ;; Colorize bullet points and dashes (theme keyword blue)
      (goto-char (point-min))
      (while (re-search-forward "^[ ]*\\([-*•]\\|[0-9]+\\.\\)" nil t)
        (put-text-property (match-beginning 1) (match-end 1) 'face
                           '(:foreground "#569cd6" :weight bold)))

      ;; Force redisplay
      (font-lock-ensure))))

;; Helper functions for preview mode
(defun my-markdown-preview-quit ()
  "Quit markdown preview and return to source buffer."
  (interactive)
  (when (boundp 'markdown-preview-window-config)
    (set-window-configuration markdown-preview-window-config))
  (when (boundp 'markdown-preview-source-buffer)
    (switch-to-buffer markdown-preview-source-buffer))
  (kill-buffer "*Markdown Preview*")
  (message "Returned to markdown source"))

(defun my-markdown-preview-refresh ()
  "Refresh the markdown preview."
  (interactive)
  (when (boundp 'markdown-preview-source-buffer)
    (let ((inhibit-read-only t)
          (source-buffer markdown-preview-source-buffer))
      (erase-buffer)
      (let ((markdown-content (with-current-buffer source-buffer (buffer-string))))
        (insert markdown-content)
        (shell-command-on-region (point-min) (point-max) "pandoc -f markdown -t plain" t t)
        (my-markdown-colorize-preview)  ; Apply colorization after refresh
        (goto-char (point-min))
        (deactivate-mark))  ; Clear any selection after refresh
      (message "Preview refreshed"))))

;; Key bindings for markdown - avoiding C-c C-f conflict
(define-key markdown-mode-map (kbd "C-c m p") 'my-markdown-toggle-preview)      ; Browser preview
(define-key markdown-mode-map (kbd "C-c m g") 'my-markdown-grip-toggle)         ; GitHub preview
(define-key markdown-mode-map (kbd "C-c m v") 'markdown-preview-mode)           ; Original preview mode
(define-key markdown-mode-map (kbd "C-c m s") 'my-markdown-split-preview)       ; Split window preview

;; Auto-close preview when markdown buffer is killed
(add-hook 'kill-buffer-hook
          (lambda ()
            (when (eq major-mode 'markdown-mode)
              (markdown-preview-cleanup))))

;; Enhanced markdown editing with proper JetBrains font
(add-hook 'markdown-mode-hook
          (lambda ()
            (visual-line-mode 1)        ; Wrap lines visually
            (setq-local fill-column 80) ; Line width for hard wrapping
            ;; FORCE JetBrains font in markdown - no exceptions
            (when (member "JetBrainsMono Nerd Font" (font-family-list))
              ;; Set ALL markdown faces to JetBrains
              (set-face-attribute 'markdown-code-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-inline-code-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-pre-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-header-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-header-face-1 nil
                                  :family "JetBrainsMono Nerd Font" :height 120)
              (set-face-attribute 'markdown-header-face-2 nil
                                  :family "JetBrainsMono Nerd Font" :height 115)
              (set-face-attribute 'markdown-header-face-3 nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-list-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-link-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-url-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-bold-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              (set-face-attribute 'markdown-italic-face nil
                                  :family "JetBrainsMono Nerd Font" :height 110)
              ;; Force entire buffer to use JetBrains
              (setq buffer-face-mode-face '(:family "JetBrainsMono Nerd Font" :height 110))
              (buffer-face-mode 1)
              ;; Override any variable-pitch nonsense
              (setq-local buffer-face-mode-face '(:family "JetBrainsMono Nerd Font" :height 110))
              (message "JetBrains font enforced in markdown buffer"))))

;; Live preview configuration
(setq markdown-preview-javascript
      (list "https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"
            "https://cdn.jsdelivr.net/npm/prismjs@1.28.0/components/prism-core.min.js"
            "https://cdn.jsdelivr.net/npm/prismjs@1.28.0/plugins/autoloader/prism-autoloader.min.js"))

(setq markdown-preview-stylesheets
      (list "https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.css"
            "https://cdn.jsdelivr.net/npm/prismjs@1.28.0/themes/prism.css"))
#+END_SRC

** Window Navigation
Fast window switching with arrow keys.

#+BEGIN_SRC emacs-lisp
;; Window navigation with Ctrl+Alt+arrows (like modern IDEs)
(global-set-key (kbd "C-M-<left>") 'windmove-left)    ; Ctrl+Alt+Left
(global-set-key (kbd "C-M-<right>") 'windmove-right)  ; Ctrl+Alt+Right
(global-set-key (kbd "C-M-<up>") 'windmove-up)        ; Ctrl+Alt+Up
(global-set-key (kbd "C-M-<down>") 'windmove-down)    ; Ctrl+Alt+Down

;; Alternative: Use Shift+Arrow for window movement (if Ctrl+Alt conflicts)
(global-set-key (kbd "S-<left>") 'windmove-left)      ; Shift+Left
(global-set-key (kbd "S-<right>") 'windmove-right)    ; Shift+Right
(global-set-key (kbd "S-<up>") 'windmove-up)          ; Shift+Up
(global-set-key (kbd "S-<down>") 'windmove-down)      ; Shift+Down

;; Window management shortcuts
(global-set-key (kbd "C-x 2") 'split-window-below)    ; Split horizontally
(global-set-key (kbd "C-x 3") 'split-window-right)    ; Split vertically
(global-set-key (kbd "C-x 0") 'delete-window)         ; Close current window
(global-set-key (kbd "C-x 1") 'delete-other-windows)  ; Close all other windows

;; Buffer navigation (complement to window navigation)
(global-set-key (kbd "C-<tab>") 'next-buffer)         ; Ctrl+Tab (next buffer)
(global-set-key (kbd "C-S-<tab>") 'previous-buffer)   ; Ctrl+Shift+Tab (previous buffer)

;; Improved buffer list that auto-jumps for selection
(defun my-buffer-list-and-switch ()
  "Show buffer list in current window for immediate selection."
  (interactive)
  (switch-to-buffer (list-buffers-noselect)))

(global-set-key (kbd "C-x C-b") 'my-buffer-list-and-switch)  ; Auto-jump to buffer list

;; Window resizing with Ctrl+Shift+arrows
(global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)   ; Make window narrower
(global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally) ; Make window wider
(global-set-key (kbd "C-S-<up>") 'shrink-window)                  ; Make window shorter
(global-set-key (kbd "C-S-<down>") 'enlarge-window)               ; Make window taller

;; Enable windmove wrapping (cycle through windows)
(setq windmove-wrap-around t)

;; Disable annoying confirmation prompts
(setq confirm-kill-emacs nil)                    ; Don't ask when exiting Emacs
(setq confirm-kill-processes nil)                ; Don't ask when killing processes
(setq kill-buffer-query-functions nil)          ; Don't ask when killing buffers
(setq large-file-warning-threshold nil)         ; Don't warn about large files
(setq vc-follow-symlinks t)                     ; Follow symlinks without asking
(setq enable-recursive-minibuffers t)           ; Allow recursive minibuffer commands

;; Disable "Buffer has a running process; kill it?" questions
(defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
  "Prevent annoying 'Active processes exist' query when you quit Emacs."
  (cl-letf (((symbol-function #'process-list) (lambda ())))
    ad-do-it))

;; Disable "Modified buffers exist; exit anyway?" questions
(defadvice save-buffers-kill-emacs (around no-query-kill-emacs-modified activate)
  "Exit Emacs immediately without asking about modified buffers."
  (cl-letf (((symbol-function #'buffer-modified-p) (lambda (&optional buffer) nil)))
    ad-do-it))

;; Alternative comprehensive approach - override the core exit function
(defun my-force-kill-emacs ()
  "Force kill Emacs without any prompts about modified buffers or processes."
  (interactive)
  (let ((kill-buffer-query-functions nil)
        (confirm-kill-processes nil)
        (confirm-kill-emacs nil))
    ;; Kill all processes without asking
    (dolist (proc (process-list))
      (when (process-live-p proc)
        (delete-process proc)))
    ;; Mark all buffers as unmodified to avoid save prompts
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (set-buffer-modified-p nil)))
    ;; Now exit
    (kill-emacs)))

;; Override standard exit commands to use force exit
(global-set-key (kbd "C-x C-c") 'my-force-kill-emacs)

;; Disable save-some-buffers prompts completely
(setq save-some-buffers-action-alist nil)  ; Remove all save prompts

;; Disable save prompt when killing buffers
(setq kill-buffer-delete-auto-save-files t)     ; Auto-delete auto-save files
;; Safely remove hook if it exists
(when (fboundp 'process-kill-buffer-query-function)
  (remove-hook 'kill-buffer-query-functions 'process-kill-buffer-query-function))

;; Disable "Buffer modified; kill anyway?" questions
(defun my-kill-buffer-query-function ()
  "Don't ask questions when killing modified buffers."
  t)

(setq kill-buffer-query-functions '(my-kill-buffer-query-function))

;; Robust buffer killing without questions
(defun my-kill-current-buffer ()
  "Kill the current buffer without asking any questions."
  (interactive)
  (let ((buffer (current-buffer)))
    ;; Temporarily disable all query functions
    (let ((kill-buffer-query-functions nil)
          (buffer-offer-save nil))
      ;; Mark buffer as unmodified to avoid save prompts
      (set-buffer-modified-p nil)
      ;; Kill the buffer
      (kill-buffer buffer))))

(defun my-force-kill-buffer ()
  "Force kill current buffer, ignoring all processes and modifications."
  (interactive)
  (let ((buffer (current-buffer)))
    ;; Kill any processes in the buffer
    (when (get-buffer-process buffer)
      (delete-process (get-buffer-process buffer)))
    ;; Mark as unmodified and kill
    (with-current-buffer buffer
      (set-buffer-modified-p nil))
    (kill-buffer buffer)))

;; Key bindings for buffer killing
(global-set-key (kbd "C-x k") 'my-kill-current-buffer)      ; Kill current buffer
(global-set-key (kbd "C-x K") 'my-force-kill-buffer)       ; Force kill buffer

;; Quick copy entire buffer with Ctrl+Backspace
(defun copy-entire-buffer ()
  "Copy the entire buffer to clipboard without moving cursor or changing selection."
  (interactive)
  (let ((current-pos (point)))
    (save-excursion
      (kill-ring-save (point-min) (point-max)))
    (goto-char current-pos)
    (deactivate-mark)
    (message "Entire buffer copied to clipboard")))

(global-set-key (kbd "C-<backspace>") 'copy-entire-buffer)  ; Ctrl+Backspace

;; Smart DWIM commenting
(defun my-comment-dwim ()
  "Smart comment/uncomment that works on lines or regions."
  (interactive)
  (cond
   ;; If region is active, comment/uncomment the region
   ((use-region-p)
    (comment-or-uncomment-region (region-beginning) (region-end)))
   ;; If line is already commented, uncomment it
   ((save-excursion
      (beginning-of-line)
      (looking-at "^[ \t]*//\\|^[ \t]*/\\*\\|^[ \t]*#"))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
   ;; Otherwise, comment the current line
   (t
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))

;; Smart commenting - use standard key only to avoid conflicts
(global-set-key (kbd "C-/") 'my-comment-dwim)     ; Ctrl+/ (modern IDE style)
#+END_SRC

** File Finding & Navigation
The most powerful file finding setup for maximum productivity.

#+BEGIN_SRC emacs-lisp
;; ENHANCED VERTICO ECOSYSTEM - Fast, Modern, Minimal
;; This replaces Helm entirely with better, faster alternatives

;; Core Vertico packages
(unless (package-installed-p 'vertico)
  (package-install 'vertico))

(unless (package-installed-p 'consult)
  (package-install 'consult))

(unless (package-installed-p 'marginalia)
  (package-install 'marginalia))

(unless (package-installed-p 'orderless)
  (package-install 'orderless))

;; Enhanced completion packages
(unless (package-installed-p 'embark)
  (package-install 'embark))

(unless (package-installed-p 'embark-consult)
  (package-install 'embark-consult))

(unless (package-installed-p 'corfu)
  (package-install 'corfu))

;; Safely load packages with error handling
(dolist (pkg '(vertico consult marginalia orderless embark embark-consult corfu))
  (condition-case err
      (require pkg)
    (error
     (message "Warning: Could not load package %s: %s" pkg (error-message-string err)))))

;; Configure packages only if they loaded successfully
(when (featurep 'vertico)
  (vertico-mode 1)
  (setq vertico-cycle t)           ; Cycle through candidates
  (setq vertico-resize t)          ; Resize minibuffer
  (setq vertico-count 20))         ; Show more candidates

(when (featurep 'marginalia)
  (marginalia-mode 1))

(when (featurep 'orderless)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides
        '((file (styles partial-completion))
          (command (styles orderless))
          (buffer (styles orderless))
          (project-file (styles orderless))
          (imenu (styles orderless))
          (kill-ring (styles orderless)))))

(when (featurep 'corfu)
  (global-corfu-mode)
  (setq corfu-cycle t              ; Enable cycling for `corfu-next/previous'
        corfu-auto t               ; Enable auto completion
        corfu-separator ?\s        ; Orderless field separator
        corfu-quit-at-boundary nil ; Never quit at completion boundary
        corfu-quit-no-match nil    ; Never quit, even if there is no match
        corfu-preview-current nil  ; Disable current candidate preview
        corfu-preselect 'prompt    ; Preselect the prompt
        corfu-on-exact-match nil)) ; Configure handling of exact matches

;; Embark keybindings (only if embark is available)
(when (featurep 'embark)
  (global-set-key (kbd "C-.") 'embark-act)         ; Action menu
  (global-set-key (kbd "C-;") 'embark-dwim)        ; Do what I mean
  (global-set-key (kbd "C-h B") 'embark-bindings)) ; Show available actions

;; MODERN VERTICO KEY BINDINGS - Telescope-like experience
;; Command palette and navigation
(global-set-key (kbd "M-x") 'consult-M-x)                   ; Enhanced command palette
(global-set-key (kbd "C-x C-f") 'find-file)                 ; File finder with completion
(global-set-key (kbd "C-x b") 'consult-buffer)              ; Buffer/recent files switcher
(global-set-key (kbd "C-x C-r") 'consult-recent-file)       ; Recent files only
(global-set-key (kbd "C-x C-b") 'consult-buffer-other-window) ; Buffer in other window

;; Enhanced search and navigation
(global-set-key (kbd "C-s") 'consult-line)                  ; Search in current buffer
(global-set-key (kbd "C-M-s") 'consult-line-multi)          ; Search across buffers
(global-set-key (kbd "M-g g") 'consult-goto-line)           ; Go to line with preview
(global-set-key (kbd "M-g M-g") 'consult-goto-line)         ; Alternative
(global-set-key (kbd "M-g i") 'consult-imenu)               ; Navigate functions/symbols
(global-set-key (kbd "M-g I") 'consult-imenu-multi)         ; Imenu across buffers

;; File and project navigation
(global-set-key (kbd "C-c f f") 'find-file)                 ; Find file
(global-set-key (kbd "C-c f r") 'consult-recent-file)       ; Recent files
(global-set-key (kbd "C-c f d") 'consult-dir)               ; Directory navigation
(global-set-key (kbd "C-c f l") 'consult-locate)            ; Locate files system-wide

;; Search and replace
(global-set-key (kbd "M-s r") 'consult-ripgrep)             ; Ripgrep search
(global-set-key (kbd "M-s f") 'consult-find)                ; Find files
(global-set-key (kbd "M-s g") 'consult-grep)                ; Grep search
(global-set-key (kbd "M-s G") 'consult-git-grep)            ; Git grep

;; History and registers
(global-set-key (kbd "M-y") 'consult-yank-pop)              ; Enhanced kill-ring
(global-set-key (kbd "C-x r b") 'consult-bookmark)          ; Bookmarks with preview
(global-set-key (kbd "C-x r r") 'consult-register)          ; Registers with preview

;; Help and documentation
(global-set-key (kbd "C-h a") 'consult-apropos)             ; Better apropos

;; Everything search integration for Windows (blazing fast system-wide search)
(when (eq system-type 'windows-nt)
  ;; Everything search within current project
  (defun everything-search-files (query)
    "Search for files using Everything search engine within current project."
    (interactive "sProject search: ")
    (let* ((project-root (or (condition-case nil (projectile-project-root) (error nil))
                            default-directory))
           (search-path (replace-regexp-in-string "/" "\\\\" project-root))
           (results (when (> (length query) 0)
                      (split-string
                       (shell-command-to-string
                        (format "C:\\Users\\chris\\es.exe -n 20 \"%s\" \"%s\"" search-path query))
                       "\n" t))))
      (if results
          (let ((choice (completing-read "Select file: " results)))
            (when choice
              (if (file-exists-p choice)
                  (progn
                    (find-file choice)
                    (message "Opened: %s" (file-name-nondirectory choice)))
                (message "File not found: %s" choice))))
        (message "No results found for: %s in project %s" query project-root))))

  ;; Everything search with Telescope-like interface
  (defun telescope-everything ()
    "Everything search with Telescope-like interface."
    (interactive)
    (let* ((query (read-string "Everything search: "))
           (results (when (> (length query) 0)
                      (split-string
                       (shell-command-to-string (format "C:\\Users\\chris\\es.exe -n 50 \"%s\"" query))
                       "\n" t))))
      (if results
          (let ((choice (completing-read "Select file: " results)))
            (when choice
              (if (file-exists-p choice)
                  (progn
                    (find-file choice)
                    (message "Opened: %s" (file-name-nondirectory choice)))
                (message "File not found: %s" choice))))
        (message "No results found for: %s" query))))

  ;; Text search using consult-grep (Telescope-like)
  (defun telescope-grep ()
    "Search text in current directory using consult-grep."
    (interactive)
    (consult-grep default-directory))

  ;; Ripgrep text search in project
  (defun ripgrep-search ()
    "Search text content using ripgrep in current project."
    (interactive)
    (let* ((query (read-string "Ripgrep search: "))
           (project-root (or (condition-case nil (projectile-project-root) (error nil))
                            default-directory))
           (cmd (format "rg --line-number --no-heading --color=never --max-count=20 \"%s\" \"%s\"" query project-root)))
      (when (> (length query) 0)
        (message "Searching for '%s'..." query)
        (let ((results (split-string
                        (shell-command-to-string cmd)
                        "\n" t)))
          (if results
              (let ((choice (completing-read "Select match: " results)))
                (when choice
                  (let* ((parts (split-string choice ":"))
                         (file (expand-file-name (car parts) project-root))
                         (line-num (if (>= (length parts) 2)
                                      (string-to-number (cadr parts))
                                    1)))
                    (when (file-exists-p file)
                      (find-file file)
                      (goto-line line-num)
                      (recenter)
                      (message "Opened %s at line %d" (file-name-nondirectory file) line-num)))))
            (message "No matches found for: %s" query))))))

  ;; Key bindings (Telescope-like interface) - Fixed conflicts
  (global-set-key (kbd "C-c s f") 'telescope-everything)    ; File search with Everything
  (global-set-key (kbd "C-c s g") 'telescope-grep)          ; Text search with grep
  (global-set-key (kbd "C-c s e") 'everything-search-files) ; Everything in project
  (global-set-key (kbd "C-c s r") 'ripgrep-search)          ; Text search with ripgrep

  ;; Keep some original mappings that don't conflict
  (global-set-key (kbd "C-c e") 'everything-search-files)   ; Everything in project
  (global-set-key (kbd "C-c r") 'ripgrep-search)            ; Text search with ripgrep

  (message "Everything search configured for Windows"))
#+END_SRC

** Treemacs - Advanced Tree View
The ultimate tree view and project explorer for Emacs (like NERDTree but better).

#+BEGIN_SRC emacs-lisp
;; Treemacs - The best tree view for Emacs
(unless (package-installed-p 'treemacs)
  (package-install 'treemacs))

(unless (package-installed-p 'treemacs-evil)
  (package-install 'treemacs-evil))

(unless (package-installed-p 'treemacs-projectile)
  (package-install 'treemacs-projectile))

(unless (package-installed-p 'treemacs-icons-dired)
  (package-install 'treemacs-icons-dired))

(unless (package-installed-p 'treemacs-magit)
  (package-install 'treemacs-magit))

(unless (package-installed-p 'treemacs-all-the-icons)
  (package-install 'treemacs-all-the-icons))

(require 'treemacs)
(require 'treemacs-projectile)
(require 'treemacs-icons-dired)
(require 'treemacs-magit)
(require 'treemacs-all-the-icons)

;; Treemacs configuration
(setq treemacs-collapse-dirs                   3     ; Collapse empty parent dirs
      treemacs-deferred-git-apply-delay        0.5   ; Git status update delay
      treemacs-directory-name-transformer      #'identity
      treemacs-display-in-side-window          t     ; Show in side window
      treemacs-eldoc-display                   'simple
      treemacs-file-event-delay                2000  ; File system event delay
      treemacs-file-extension-regex            treemacs-last-period-regex-value
      treemacs-file-follow-delay               0.2   ; Auto-follow delay
      treemacs-file-name-transformer           #'identity
      treemacs-follow-after-init               t     ; Follow file after init
      treemacs-expand-after-init               t     ; Expand project after init
      treemacs-find-workspace-method           'find-for-file-or-pick-first
      treemacs-git-command-pipe                ""
      treemacs-goto-tag-strategy               'refetch-index
      treemacs-header-scroll-indicators        '(nil . "^^^^^^")
      treemacs-hide-dot-git-directory          t     ; Hide .git folders
      treemacs-indentation                     2     ; 2-space indentation
      treemacs-indentation-string              " "   ; Use spaces
      treemacs-is-never-other-window           nil
      treemacs-max-git-entries                 5000  ; Git status for many files
      treemacs-missing-project-action          'ask
      treemacs-move-forward-on-expand          nil
      treemacs-no-png-images                   nil   ; Use PNG icons
      treemacs-no-delete-other-windows         t     ; Don't delete other windows
      treemacs-project-follow-cleanup          nil
      treemacs-persist-file                    (expand-file-name ".treemacs-persist" user-emacs-directory)
      treemacs-position                        'left ; Position on left side
      treemacs-read-string-input               'from-child-frame
      treemacs-recenter-distance               0.1
      treemacs-recenter-after-file-follow      nil
      treemacs-recenter-after-tag-follow       nil
      treemacs-recenter-after-project-jump     'always
      treemacs-recenter-after-project-expand   'on-distance
      treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
      treemacs-project-follow-into-home        nil
      treemacs-show-cursor                     nil   ; Hide cursor in treemacs
      treemacs-show-hidden-files               t     ; Show hidden files
      treemacs-silent-filewatch               nil
      treemacs-silent-refresh                  nil
      treemacs-sorting                         'alphabetic-asc
      treemacs-select-when-already-in-treemacs 'move-back
      treemacs-space-between-root-nodes        t     ; Space between projects
      treemacs-tag-follow-cleanup              t
      treemacs-tag-follow-delay                1.5
      treemacs-text-scale                      nil
      treemacs-user-mode-line-format           nil
      treemacs-user-header-line-format         nil
      treemacs-wide-toggle-width               70    ; Wide view width
      treemacs-width                           35    ; Default width
      treemacs-width-increment                 1
      treemacs-width-is-initially-locked       t     ; Lock width initially
      treemacs-workspace-switch-cleanup        nil)

;; Use all-the-icons theme for beautiful icons
(treemacs-load-theme "all-the-icons")

;; Enable treemacs-icons-dired integration
(treemacs-icons-dired-mode 1)

;; Key bindings for treemacs
(global-set-key (kbd "M-0")       'treemacs-select-window)        ; Focus treemacs
(global-set-key (kbd "C-x t 1")   'treemacs-delete-other-windows) ; Maximize treemacs
(global-set-key (kbd "C-x t t")   'treemacs)                      ; Toggle treemacs
(global-set-key (kbd "C-x t d")   'treemacs-select-directory)     ; Select directory
(global-set-key (kbd "C-x t B")   'treemacs-bookmark)             ; Bookmark current
(global-set-key (kbd "C-x t C-t") 'treemacs-find-file)            ; Find current file
(global-set-key (kbd "C-x t M-t") 'treemacs-find-tag)             ; Find tag

;; Projectile integration
(with-eval-after-load 'treemacs
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))

;; Auto-follow current file in treemacs
(treemacs-follow-mode t)

;; Auto-sync treemacs with file system changes
(treemacs-filewatch-mode t)

;; Sync treemacs with Git status
(treemacs-git-mode 'deferred)

;; Hide gitignored files by default
(treemacs-hide-gitignored-files-mode t)
#+END_SRC

** File Management (Dired)
Enhanced file browser with modern features.

#+BEGIN_SRC emacs-lisp
;; Dired configuration for better file management
(require 'dired)

;; Force vertical splits for dired
(setq split-height-threshold nil)      ; Never split horizontally
(setq split-width-threshold 100)      ; Split vertically when window is wide enough

;; Dired improvements
(setq dired-listing-switches "-alh")   ; Human-readable sizes, show hidden files
(setq dired-dwim-target t)             ; Guess target directory for operations
(setq dired-recursive-copies 'always)  ; Always copy recursively
(setq dired-recursive-deletes 'always) ; Always delete recursively

;; Modern dired enhancements
(unless (package-installed-p 'dired-sidebar)
  (package-install 'dired-sidebar))

(unless (package-installed-p 'all-the-icons)
  (package-install 'all-the-icons))

(unless (package-installed-p 'all-the-icons-dired)
  (package-install 'all-the-icons-dired))

(require 'dired-sidebar)
(require 'all-the-icons)
(require 'all-the-icons-dired)

;; Fonts are already manually installed - skip automatic installation
(message "all-the-icons fonts are already installed manually")

;; Add icons to dired (like VS Code file explorer)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; Fallback for Windows if icons don't work
(when (eq system-type 'windows-nt)
  (setq all-the-icons-dired-monochrome nil))

;; Dired sidebar configuration (like VS Code sidebar)
(setq dired-sidebar-theme 'nerd)
(setq dired-sidebar-use-term-integration t)
(setq dired-sidebar-use-custom-font t)  ; Let sidebar use its font for icons

;; Built-in dired buffer reuse (replaces dired-single)
(setq dired-kill-when-opening-new-dired-buffer t)  ; Kill old dired buffers

;; Custom functions to reuse dired buffers (fixed for . and ..)
(defun my-dired-find-file ()
  "Open file or directory in same dired buffer."
  (interactive)
  (let ((file (dired-get-filename nil t)))  ; Don't fail on . and ..
    (cond
     ;; Handle . (current directory) - just refresh
     ((string= (file-name-nondirectory file) ".")
      (revert-buffer))
     ;; Handle .. (parent directory) - go up
     ((string= (file-name-nondirectory file) "..")
      (dired-up-directory))
     ;; Handle regular directories
     ((file-directory-p file)
      (find-alternate-file file))
     ;; Handle regular files
     (t
      (find-file file)))))

(defun my-dired-up-directory ()
  "Go to parent directory in same buffer."
  (interactive)
  (dired-up-directory))

;; Key bindings for buffer reuse
(defun my-dired-buffer-reuse-init ()
  "Initialize dired buffer reuse keybindings."
  (define-key dired-mode-map [return] 'my-dired-find-file)
  (define-key dired-mode-map "^" 'my-dired-up-directory))

(add-hook 'dired-mode-hook 'my-dired-buffer-reuse-init)

;; Key bindings for enhanced dired
(global-set-key (kbd "C-x C-d") 'dired-sidebar-toggle-sidebar)  ; Toggle sidebar
(global-set-key (kbd "C-x d") 'dired)                           ; Standard dired

;; Dired customizations
(defun my-dired-mode-setup ()
  "Customize dired mode."
  (dired-hide-details-mode 1)           ; Start with details hidden
  (hl-line-mode 1)                      ; Highlight current line
  ;; Ensure dired uses the same font as the rest of Emacs
  (when (member "JetBrainsMono Nerd Font" (font-family-list))
    (setq buffer-face-mode-face '(:family "JetBrainsMono Nerd Font" :height 110))
    (buffer-face-mode 1)))

(add-hook 'dired-mode-hook 'my-dired-mode-setup)

;; Also fix font for all special buffers
(defun my-ensure-consistent-font ()
  "Ensure all buffers use the same font, except dired sidebar."
  (when (and (member "JetBrainsMono Nerd Font" (font-family-list))
             (not (minibufferp))
             (not (string-match-p "\\*dired-sidebar\\*" (buffer-name))))  ; Exclude sidebar
    (setq buffer-face-mode-face '(:family "JetBrainsMono Nerd Font" :height 110))
    (buffer-face-mode 1)))

;; Font hooks replaced by aggressive enforcement system above

;; Simplified font consistency - removed aggressive blocking approach

;; Fix font for daemon-created frames (Windows-specific fix)
(add-hook 'after-make-frame-functions
          (lambda (frame)
            (with-selected-frame frame
              ;; Force font detection refresh for new frames
              (when (display-graphic-p frame)
                (cond
                 ;; Try JetBrains Mono Nerd Font first
                 ((member "JetBrainsMono Nerd Font" (font-family-list))
                  (set-face-attribute 'default frame :family "JetBrainsMono Nerd Font" :height 110)
                  (set-face-attribute 'fixed-pitch frame :family "JetBrainsMono Nerd Font" :height 110)
                  (message "Applied JetBrains Mono to new frame"))
                 ;; Fallback to Cascadia Code
                 ((member "Cascadia Code" (font-family-list))
                  (set-face-attribute 'default frame :family "Cascadia Code" :height 110)
                  (message "Applied Cascadia Code to new frame"))
                 ;; Fallback to Consolas
                 ((member "Consolas" (font-family-list))
                  (set-face-attribute 'default frame :family "Consolas" :height 110)
                  (message "Applied Consolas to new frame"))
                 (t
                  (message "No preferred fonts found for new frame")))))))

;; Additional daemon font fix - run when client connects
(defun fix-daemon-font ()
  "Fix font issues in daemon mode."
  (interactive)
  (when (display-graphic-p)
    (cond
     ((member "JetBrainsMono Nerd Font" (font-family-list))
      (set-face-attribute 'default nil :family "JetBrainsMono Nerd Font" :height 110)
      (message "JetBrains Mono applied"))
     ((member "Cascadia Code" (font-family-list))
      (set-face-attribute 'default nil :family "Cascadia Code" :height 110)
      (message "Cascadia Code applied"))
     (t
      (message "Using system default font")))))

;; Key binding to manually fix font if needed
(global-set-key (kbd "C-c M-f") 'fix-daemon-font)

;; Quick file operations
(defun dired-open-file-external ()
  "Open file with external application."
  (interactive)
  (let ((file (dired-get-filename)))
    (call-process-shell-command (format "start \"\" \"%s\"" file))))

(define-key dired-mode-map (kbd "E") 'dired-open-file-external)

;; Better window splitting behavior for all buffers
(defun my-split-window-sensibly (&optional window)
  "Custom window splitting that prefers vertical splits."
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             (split-window window nil 'right))
        (and (window-splittable-p window)
             (split-window window)))))

(setq split-window-preferred-function 'my-split-window-sensibly)
#+END_SRC

** Project Management
Project navigation and management tools with multi-project workspace support.

#+BEGIN_SRC emacs-lisp
;; Projectile for project navigation and management
(unless (package-installed-p 'projectile)
  (package-install 'projectile))

(require 'projectile)
(projectile-mode +1)

;; Ensure projectile is properly initialized
(with-eval-after-load 'projectile
  (setq projectile-completion-system 'default)
  (setq projectile-enable-caching t)
  (setq projectile-file-exists-remote-cache-expire (* 10 60)))

;; Multi-Project Workspace Management System
;; This allows you to have multiple projects open with clear visual separation

;; Install perspective.el for project workspaces
(unless (package-installed-p 'perspective)
  (package-install 'perspective))

(require 'perspective)

;; Configure perspective mode with proper prefix key
(setq persp-mode-prefix-key (kbd "C-c M-p"))  ; Set prefix key to C-c M-p
(setq persp-suppress-no-prefix-key-warning t) ; Suppress warning if needed

(persp-mode)

;; Project workspace variables
(defvar my-project-workspaces '()
  "List of active project workspaces with metadata.")

(defvar my-current-project-info nil
  "Current project information for mode line display.")

;; Enhanced project workspace management
(defun my-create-project-workspace (project-path &optional workspace-name)
  "Create a new workspace for a project with visual identification."
  (interactive (list (read-directory-name "Project directory: ")
                     (read-string "Workspace name (optional): ")))
  (let* ((project-name (or (and (not (string-empty-p workspace-name)) workspace-name)
                          (file-name-nondirectory (directory-file-name project-path))))
         (workspace-id (format "%s" project-name))
         (project-color (my-assign-project-color project-name)))

    ;; Create or switch to perspective
    (persp-switch workspace-id)

    ;; Set project root in projectile if available
    (when (and (fboundp 'projectile-project-root) (boundp 'projectile-mode) projectile-mode)
      (setq projectile-project-root project-path))

    ;; Store project metadata
    (setq my-current-project-info
          `(:name ,project-name
            :path ,project-path
            :color ,project-color
            :workspace ,workspace-id))

    ;; Add to workspace list if not already there
    (unless (assoc workspace-id my-project-workspaces)
      (push (cons workspace-id my-current-project-info) my-project-workspaces))

    ;; Open project files
    (dired project-path)
    (when (fboundp 'treemacs-add-and-display-current-project)
      (treemacs-add-and-display-current-project))

    ;; Update mode line
    (my-update-project-mode-line)

    (message "Created workspace '%s' for project '%s' (Color: %s)"
             workspace-id project-name project-color)))

;; Project color assignment for visual distinction
(defun my-assign-project-color (project-name)
  "Assign a unique color to a project based on its name."
  (let ((colors '("#569cd6" "#4ec9b0" "#ce9178" "#c586c0" "#dcdcaa"
                  "#b5cea8" "#9cdcfe" "#f44747" "#ff6b6b" "#4ecdc4")))
    (nth (mod (string-hash project-name) (length colors)) colors)))

;; Switch between project workspaces
(defun my-switch-project-workspace ()
  "Switch between active project workspaces with preview."
  (interactive)
  (let* ((workspace-choices (mapcar (lambda (ws)
                                     (let ((info (cdr ws)))
                                       (format "%s (%s)"
                                              (car ws)
                                              (plist-get info :path))))
                                   my-project-workspaces))
         (choice (completing-read "Switch to workspace: " workspace-choices)))
    (when choice
      (let* ((workspace-name (car (split-string choice " (")))
             (workspace-info (cdr (assoc workspace-name my-project-workspaces))))
        (persp-switch workspace-name)
        (setq my-current-project-info workspace-info)
        (my-update-project-mode-line)
        (message "Switched to workspace: %s" workspace-name)))))

;; Close project workspace
(defun my-close-project-workspace ()
  "Close the current project workspace."
  (interactive)
  (let ((current-workspace (persp-current-name)))
    (when (and current-workspace
               (y-or-n-p (format "Close workspace '%s'? " current-workspace)))
      ;; Remove from our tracking
      (setq my-project-workspaces
            (assoc-delete-all current-workspace my-project-workspaces))
      ;; Kill perspective
      (persp-kill current-workspace)
      ;; Clear current project info if this was the active one
      (when (and my-current-project-info
                 (string= (plist-get my-current-project-info :workspace) current-workspace))
        (setq my-current-project-info nil))
      (my-update-project-mode-line)
      (message "Closed workspace: %s" current-workspace))))

;; Open existing project in new workspace
(defun my-open-project-in-workspace ()
  "Open an existing project in a new workspace using projectile."
  (interactive)
  (let ((project-path (projectile-completing-read
                      "Open project in new workspace: "
                      (projectile-relevant-known-projects))))
    (when project-path
      (my-create-project-workspace project-path))))

;; List all active workspaces with project info
(defun my-list-project-workspaces ()
  "Show all active project workspaces in a buffer."
  (interactive)
  (let ((buffer (get-buffer-create "*Project Workspaces*")))
    (with-current-buffer buffer
      (erase-buffer)
      (insert "=== Active Project Workspaces ===\n\n")
      (if my-project-workspaces
          (dolist (ws my-project-workspaces)
            (let* ((workspace-name (car ws))
                   (info (cdr ws))
                   (project-name (plist-get info :name))
                   (project-path (plist-get info :path))
                   (project-color (plist-get info :color))
                   (is-current (and my-current-project-info
                                   (string= workspace-name
                                           (plist-get my-current-project-info :workspace)))))
              (insert (format "%s [%s] %s\n    Path: %s\n    Color: %s\n\n"
                             (if is-current "* CURRENT *" "          ")
                             workspace-name
                             project-name
                             project-path
                             project-color))))
        (insert "No active project workspaces.\n"))
      (goto-char (point-min))
      (read-only-mode 1))
    (display-buffer buffer)))

;; Update mode line with project information
(defun my-update-project-mode-line ()
  "Update mode line to show current project workspace."
  (force-mode-line-update t))

;; Enhanced mode line format with project info
(defface my-project-mode-line-face
  '((t (:foreground "#ffffff" :background "#569cd6" :weight bold)))
  "Face for project information in mode line.")

(defvar my-project-mode-line-format
  '(:eval (when (and my-current-project-info
                     (plist-get my-current-project-info :name)
                     (plist-get my-current-project-info :color))
            (let ((project-name (plist-get my-current-project-info :name))
                  (project-color (plist-get my-current-project-info :color)))
              (condition-case nil
                  (propertize (format " [%s] " project-name)
                             'face `(:foreground "#ffffff"
                                    :background ,project-color
                                    :weight bold)
                             'help-echo (format "Project: %s\nPath: %s\nWorkspace: %s"
                                               project-name
                                               (or (plist-get my-current-project-info :path) "")
                                               (or (plist-get my-current-project-info :workspace) "")))
                (error "")))))
  "Mode line format for project information.")

;; Add project info to mode line
(setq-default mode-line-format
              (append '(my-project-mode-line-format " ")
                      (default-value 'mode-line-format)))

;; Auto-detect project when opening files
(defun my-auto-detect-project ()
  "Automatically detect and switch to project workspace when opening files."
  (when (and buffer-file-name (fboundp 'projectile-project-root))
    (let* ((file-project-root (condition-case nil
                                  (projectile-project-root)
                                (error nil)))
           (existing-workspace (when file-project-root
                                 (cl-find-if
                                  (lambda (ws)
                                    (and (cdr ws)
                                         (plist-get (cdr ws) :path)
                                         (string= (plist-get (cdr ws) :path) file-project-root)))
                                  my-project-workspaces))))
      (when (and file-project-root
                 existing-workspace
                 (not (and my-current-project-info
                          (string= (plist-get my-current-project-info :path) file-project-root))))
        (let ((workspace-name (car existing-workspace)))
          (when (and workspace-name (fboundp 'persp-switch))
            (persp-switch workspace-name)
            (setq my-current-project-info (cdr existing-workspace))
            (my-update-project-mode-line)
            (message "Auto-switched to workspace: %s" workspace-name)))))))

;; Enable auto project detection safely
(defun safe-auto-detect-project ()
  "Safely auto-detect project only if projectile is loaded and working."
  (when (and (fboundp 'projectile-project-root)
             (boundp 'projectile-mode)
             projectile-mode)
    (my-auto-detect-project)))

(add-hook 'find-file-hook 'safe-auto-detect-project)

;; Key bindings for project workspace management
(global-set-key (kbd "C-c w c") 'my-create-project-workspace)    ; Create workspace
(global-set-key (kbd "C-c w s") 'my-switch-project-workspace)    ; Switch workspace
(global-set-key (kbd "C-c w o") 'my-open-project-in-workspace)   ; Open project in workspace
(global-set-key (kbd "C-c w k") 'my-close-project-workspace)     ; Close workspace
(global-set-key (kbd "C-c w l") 'my-list-project-workspaces)     ; List workspaces
; Removed - conflicts with enhanced version below

;; Enhanced perspective switching with project awareness
(defun my-perspective-switch-with-project-info ()
  "Switch perspectives with project information display."
  (interactive)
  (let* ((perspectives (persp-names))
         (current-persp (persp-current-name))
         (choices (mapcar (lambda (p)
                           (let ((ws-info (cdr (assoc p my-project-workspaces))))
                             (if ws-info
                                 (format "%s%s [%s]"
                                        (if (string= p current-persp) "* " "  ")
                                        p
                                        (plist-get ws-info :name))
                               (format "%s%s"
                                      (if (string= p current-persp) "* " "  ")
                                      p))))
                         perspectives)))
    (when choices
      (let* ((choice (completing-read "Switch to perspective: " choices))
             (persp-name (replace-regexp-in-string "^[* ]+" ""
                                                  (car (split-string choice " \\[")))))
        (persp-switch persp-name)
        (let ((workspace-info (cdr (assoc persp-name my-project-workspaces))))
          (when workspace-info
            (setq my-current-project-info workspace-info)
            (my-update-project-mode-line)))))))

;; Override default perspective switch
(global-set-key (kbd "C-c w w") 'my-perspective-switch-with-project-info)

;; Integrate Projectile with Consult for Telescope-like navigation
(unless (package-installed-p 'consult-projectile)
  (package-install 'consult-projectile))

(require 'consult-projectile)

;; Telescope-like key bindings for Projectile
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(global-set-key (kbd "C-c p f") 'consult-projectile-find-file)     ; Find file in project (like Telescope)
(global-set-key (kbd "C-c p p") 'consult-projectile-switch-project) ; Switch project
(global-set-key (kbd "C-c p s g") 'consult-projectile-grep)        ; Search in project


;; Magit for Git integration
(unless (package-installed-p 'magit)
  (package-install 'magit))

;; Company for better autocompletion
(unless (package-installed-p 'company)
  (package-install 'company))

(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0.2)
(setq company-minimum-prefix-length 1)

;; Which-key for discoverable keybindings
(unless (package-installed-p 'which-key)
  (package-install 'which-key))

(require 'which-key)
(which-key-mode)

;; Terminal support with eat (required for claude-code.el)
;; eat package is available in NonGNU ELPA
(message "Checking for eat package...")
(unless (package-installed-p 'eat)
  (message "eat not found - installing from NonGNU ELPA...")
  (condition-case err
      (progn
        ;; Force refresh and try to install
        (package-refresh-contents)
        (sit-for 1)  ; Wait a moment for refresh
        (package-install 'eat)
        (message "✅ eat package installed successfully!")
        (sit-for 1))
    (error
     (message "❌ Could not install eat package: %s" (error-message-string err))
     (message "💡 Try manually: M-x package-install RET eat RET"))))

;; Load and configure eat with Windows compatibility
(when (package-installed-p 'eat)
  (condition-case err
      (progn
        (require 'eat)
        ;; Windows-specific eat configuration
        (when (eq system-type 'windows-nt)
          ;; Try multiple shell options for Windows compatibility
          (cond
           ;; Try PowerShell Core (pwsh) first
           ((executable-find "pwsh")
            (setq eat-shell-program-name "pwsh")
            (setq eat-shell-program-args '("-NoLogo")))
           ;; Try Windows PowerShell
           ((executable-find "powershell")
            (setq eat-shell-program-name "powershell")
            (setq eat-shell-program-args '("-NoLogo")))
           ;; Fall back to cmd.exe
           (t
            (setq eat-shell-program-name "cmd")
            (setq eat-shell-program-args '("/k"))))

          ;; Windows-specific eat settings
          (setq eat-term-name "xterm-256color")
          (setq eat-enable-mouse t)
          (setq eat-kill-buffer-on-exit t))

        ;; Don't test eat during startup to avoid spawn errors
        (message "✅ eat package loaded (terminal spawn test skipped during init)")

        ;; Create a manual test function for eat
        (defun test-eat-terminal ()
          "Test if eat can spawn terminals on Windows."
          (interactive)
          (condition-case err
              (progn
                (eat "test-terminal")
                (message "✅ eat terminal works! claude-code will use eat backend"))
            (error
             (message "❌ eat spawn failed: %s" (error-message-string err))
             (message "💡 claude-code will use fallback backend"))))

        ;; Configure claude-code to be more tolerant of terminal failures
        (defun claude-code-safe-terminal ()
          "Safely start claude-code terminal or use fallback."
          (interactive)
          (condition-case err
              (call-interactively 'claude-code)
            (error
             (message "❌ claude-code terminal failed: %s" (error-message-string err))
             (message "💡 Try: M-x test-eat-terminal to debug")))))
    (error
     (message "⚠️ eat package failed to load: %s" (error-message-string err)))))

;; Multiple cursors for efficient editing
(unless (package-installed-p 'multiple-cursors)
  (package-install 'multiple-cursors))

(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
(global-set-key (kbd "C-=") 'mc/mark-next-like-this)     ; Alternative for C->
(global-set-key (kbd "M-+") 'mc/mark-all-like-this)      ; Alternative for mark all

;; Rainbow brackets for better code structure visualization
(unless (package-installed-p 'rainbow-delimiters)
  (package-install 'rainbow-delimiters))

(require 'rainbow-delimiters)

;; Enable rainbow brackets and font enforcement in programming modes
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'c-mode-hook 'rainbow-delimiters-mode)
(add-hook 'go-mode-hook 'rainbow-delimiters-mode)
(add-hook 'odin-mode-hook 'rainbow-delimiters-mode)
(add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
(add-hook 'lisp-interaction-mode-hook 'rainbow-delimiters-mode)

;; Force font consistency in Odin mode specifically
(add-hook 'odin-mode-hook 'force-jetbrains-font-selectively)

;; Configure rainbow colors to match voidlight theme
(with-eval-after-load 'rainbow-delimiters
  (set-face-foreground 'rainbow-delimiters-depth-1-face "#569cd6")    ; Blue
  (set-face-foreground 'rainbow-delimiters-depth-2-face "#4ec9b0")    ; Cyan
  (set-face-foreground 'rainbow-delimiters-depth-3-face "#9cdcfe")    ; Light blue
  (set-face-foreground 'rainbow-delimiters-depth-4-face "#b5cea8")    ; Green
  (set-face-foreground 'rainbow-delimiters-depth-5-face "#ce9178")    ; Orange
  (set-face-foreground 'rainbow-delimiters-depth-6-face "#d4d4d4")    ; Light gray
  (set-face-foreground 'rainbow-delimiters-depth-7-face "#c586c0")    ; Purple
  (set-face-foreground 'rainbow-delimiters-depth-8-face "#dcdcaa")    ; Yellow
  (set-face-foreground 'rainbow-delimiters-depth-9-face "#f44747"))   ; Red
#+END_SRC

* Usage Notes
** Key Bindings
*** Build/Run/Debug
- =F3= - Smart Build (detects project type)
- =F4= - Smart Run (detects project type)
- =Shift+F4= - Smart Debug (detects project type)
- =F5= - Dream-specific build
- =F6= - Dream-specific run
- =Shift+F6= - Dream-specific debug

*** Project Workspace Management
- =C-c w c= - Create new project workspace
- =C-c w s= - Switch between project workspaces
- =C-c w o= - Open existing project in new workspace
- =C-c w k= - Close current workspace
- =C-c w l= - List all active workspaces
- =C-c w w= - Quick workspace switcher with project info

*** Dashboard & Navigation
- =C-c d= - Open interactive dashboard
- =C-c s c= - Create/switch to scratch buffer

*** File Finding & Navigation (Vertico-powered)
- =C-x C-f= - Find files (Vertico fuzzy matching)
- =C-x b= - Switch buffers with Consult (recent files + open buffers)
- =C-x C-r= - Recent files
- =M-x= - Enhanced command palette
- =C-c p f= - Find file in project (fuzzy)
- =C-c p p= - Switch between projects
- =C-c e= - Everything search (system-wide on Windows)

*** Text Search
- =C-c s= - File search with Everything (system-wide)
- =C-c S= - Text search in current directory (grep)
- =C-c p s g= - Search text in project (Consult + grep)

*** LSP Navigation
- =M-x eglot= - Start LSP server for current C file (auto-starts)
- =M-.= - Go to definition (when LSP is active)
- =M-,= - Go back from definition

*** Git Integration
- =C-x g= - Magit status (staging, commits, push/pull)

*** Multiple Cursors
- =C-S-c C-S-c= - Edit multiple lines
- =C->= - Mark next like this
- =C-<= - Mark previous like this
- =C-c C-<= - Mark all like this

** LSP Features
When Eglot is active in a C file, you get:
- Code completion
- Go to definition/declaration
- Find references
- Real-time diagnostics
- Hover documentation

** Build Integration
The F3 build command will:
- Switch to the Dream project directory
- Run CMake build with Release configuration
- Show build output in a compilation buffer
- Allow clicking on errors to jump to source locations
#+END_SRC