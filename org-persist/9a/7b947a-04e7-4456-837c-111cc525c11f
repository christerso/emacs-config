;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[nil [nil nil #8=(headline (:standard-properties [146 146 179 9181 9181 0 #1=(:title) section element t nil 181 9179 2 nil nil nil #5=(headline (:standard-properties [123 123 146 9181 9181 0 #1# nil element t nil 148 9179 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 9181 9181 0 nil org-data nil t nil 3 9181 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/xref-preview.org" :CATEGORY "xref-preview"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 21) t] :title #2=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #3=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #4=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 32) t] :title #2# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #3# :archivedp #4# :commentedp nil)) 0] #5# 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 30 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 123 123 0 nil first-section element t nil 1 123 nil nil nil nil #6#]))] :key "TITLE" :value "Xref Preview Module")) 0] #7# 0] [[[nil nil (keyword (:standard-properties [46 46 nil nil 102 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Interactive xref navigation with preview")) 0] [nil nil #5# 0] (keyword (:standard-properties [102 102 nil nil 123 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] [nil [nil nil (src-block (:standard-properties [179 179 nil nil 9181 0 nil planning element t nil nil nil nil nil nil nil #9=(section (:standard-properties [179 179 179 9181 9181 0 nil section element t nil 179 9181 nil nil nil nil #8#]))] :language "emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Custom xref show function with preview\12(defun xref-show-xrefs-function-with-preview (fetcher alist)\12  \"Custom xref show function with preview capabilities.\"\12  (let ((xrefs (funcall fetcher)))\12    (if (not xrefs)\12        (user-error \"No references found\")\12      (xref-show-xrefs-with-preview xrefs alist))))\12\12;; Interactive xref with preview\12(defun xref-find-references-with-preview ()\12  \"Find references with interactive preview.\"\12  (interactive)\12  (let ((xref-show-xrefs-function 'xref-show-xrefs-function-with-preview))\12    (call-interactively 'xref-find-references)))\12\12(defun xref-find-definitions-with-preview ()\12  \"Find definitions with interactive preview.\"\12  (interactive)\12  (let ((xref-show-xrefs-function 'xref-show-xrefs-function-with-preview))\12    (call-interactively 'xref-find-definitions)))\12\12(defun xref-show-xrefs-with-preview (xrefs alist)\12  \"Show xrefs in a buffer with interactive preview.\"\12  (let ((buf (get-buffer-create \"*xref-preview*\"))\12        (original-window (selected-window))\12        (original-buffer (current-buffer)))\12\12    (with-current-buffer buf\12      (setq buffer-read-only nil)\12      (erase-buffer)\12      (insert \"Navigate with ↑/↓, jump with RET, quit with q\\n\")\12      (insert \"─────────────────────────────────────────────────\\n\\n\")\12\12      ;; Store data as buffer-local variables\12      (setq-local xref-preview-list xrefs)\12      (setq-local xref-preview-index 0)\12      (setq-local xref-preview-original-window original-window)\12      (setq-local xref-preview-original-buffer original-buffer)\12      (setq-local xref-preview-current-overlay nil)\12\12      ;; Prevent auto-focus interference\12      (setq-local auto-focus-disabled t)\12\12      ;; Insert xref entries\12      (dolist (xref xrefs)\12        (let* ((summary (xref-item-summary xref))\12               (location (xref-item-location xref))\12               (file (xref-location-group location))\12               (line (xref-location-line location)))\12          (insert (format \"%s:%d: %s\\n\"\12                         (file-name-nondirectory file)\12                         line\12                         summary))))\12\12      (goto-char (point-min))\12      (forward-line 3) ; Skip header\12\12      ;; Clear any selection in the preview buffer itself\12      (deactivate-mark t)\12      (setq mark-active nil)\12      (push-mark (point) nil nil) ; Set mark but don't activate\12      (deactivate-mark t)\12\12      (setq buffer-read-only t)\12\12      ;; Define local keymap\12      (let ((map (make-sparse-keymap)))\12        (define-key map (kbd \"<up>\") 'xref-preview-up)\12        (define-key map (kbd \"<down>\") 'xref-preview-down)\12        (define-key map (kbd \"p\") 'xref-preview-up)\12        (define-key map (kbd \"n\") 'xref-preview-down)\12        (define-key map (kbd \"<return>\") 'xref-preview-jump)\12        (define-key map (kbd \"RET\") 'xref-preview-jump)\12        (define-key map (kbd \"q\") 'xref-preview-quit)\12        (define-key map (kbd \"C-g\") 'xref-preview-quit)\12        (define-key map (kbd \"<escape>\") 'xref-preview-quit)\12        (use-local-map map))\12\12      ;; Also set buffer-local quit function for emergency\12      (setq-local quit-window-hook 'xref-preview-quit))\12\12    ;; Display the buffer in bottom window\12    (display-buffer buf '(display-buffer-at-bottom . ((window-height . 15))))\12    (select-window (get-buffer-window buf))\12\12    ;; Show initial preview in main window\12    (xref-preview-update-display)\12\12    ;; Aggressively clear any selection mode\12    (with-current-buffer buf\12      (deactivate-mark)\12      (setq mark-active nil)\12      (setq-local transient-mark-mode nil)\12      (setq-local cua-mode nil)\12      (goto-char (point-min))\12      (forward-line 3)\12      (set-mark (point))\12      (deactivate-mark))))\12\12(defun xref-preview-up ()\12  \"Move to previous xref entry.\"\12  (interactive)\12  (when (> xref-preview-index 0)\12    (setq xref-preview-index (1- xref-preview-index))\12    (xref-preview-update-display)))\12\12(defun xref-preview-down ()\12  \"Move to next xref entry.\"\12  (interactive)\12  (when (< xref-preview-index (1- (length xref-preview-list)))\12    (setq xref-preview-index (1+ xref-preview-index))\12    (xref-preview-update-display)))\12\12(defun xref-preview-jump ()\12  \"Jump to selected xref entry.\"\12  (interactive)\12  (let ((xref (nth xref-preview-index xref-preview-list))\12        (orig-win xref-preview-original-window)\12        (current-win (selected-window))\12        (current-buf (current-buffer))\12        (current-overlay xref-preview-current-overlay))\12\12    ;; Clean up highlight overlay\12    (when (and current-overlay (overlay-buffer current-overlay))\12      (delete-overlay current-overlay))\12\12    ;; Kill the preview buffer\12    (set-buffer-modified-p nil)\12    (kill-buffer current-buf)\12\12    ;; Close the preview window\12    (when (> (length (window-list)) 1)\12      (delete-window current-win))\12\12    ;; Jump to the location in the main window\12    (when (window-live-p orig-win)\12      (select-window orig-win))\12    (xref-show-location (xref-item-location xref) 'window)))\12\12(defun xref-preview-quit ()\12  \"Quit xref preview with aggressive cleanup.\"\12  (interactive)\12  (message \"Attempting to quit xref preview...\")\12  (let ((orig-buf xref-preview-original-buffer)\12        (orig-win xref-preview-original-window)\12        (current-buf (current-buffer))\12        (current-win (selected-window))\12        (current-overlay xref-preview-current-overlay))\12\12    ;; Clean up highlight overlay\12    (when (and current-overlay (overlay-buffer current-overlay))\12      (delete-overlay current-overlay))\12\12    ;; Force kill the current buffer\12    (set-buffer-modified-p nil)\12    (kill-buffer current-buf)\12\12    ;; Close the window if it's not the only one\12    (when (> (length (window-list)) 1)\12      (delete-window current-win))\12\12    ;; Try to restore original state\12    (condition-case err\12        (progn\12          (when (window-live-p orig-win)\12            (select-window orig-win))\12          (when (buffer-live-p orig-buf)\12            (switch-to-buffer orig-buf))\12          (message \"Xref preview closed successfully\"))\12      (error\12       (message \"Xref preview closed with warnings: %s\" err)))))\12\12(defun xref-preview-update-display ()\12  \"Update the display and preview.\"\12  (let ((buf (current-buffer)))\12    ;; Update selection highlighting\12    (with-current-buffer buf\12      (setq buffer-read-only nil)\12      (goto-char (point-min))\12      (forward-line 3) ; Skip header\12\12      ;; Remove previous highlighting\12      (remove-overlays (point) (point-max) 'face)\12\12      ;; Add highlighting to current line\12      (forward-line xref-preview-index)\12      (let ((overlay (make-overlay (line-beginning-position) (line-end-position))))\12        (overlay-put overlay 'face 'highlight))\12\12      (setq buffer-read-only t))\12\12    ;; Update preview in main window\12    (when (< xref-preview-index (length xref-preview-list))\12      (xref-preview-show-location-in-main (nth xref-preview-index xref-preview-list) xref-preview-original-window))))\12\12(defun xref-preview-show-location-in-main (xref original-window)\12  \"Show location in the main window.\"\12  (let* ((location (xref-item-location xref))\12         (file (xref-location-group location))\12         (line (xref-location-line location))\12         (preview-buf (get-buffer \"*xref-preview*\")))\12\12    (with-selected-window original-window\12\12      ;; Clean up previous overlay first\12      (when (and preview-buf\12                 (buffer-local-value 'xref-preview-current-overlay preview-buf))\12        (let ((old-overlay (buffer-local-value 'xref-preview-current-overlay preview-buf)))\12          (when (and old-overlay (overlay-buffer old-overlay))\12            (delete-overlay old-overlay))))\12\12      (find-file file)\12      (goto-char (point-min))\12      (forward-line (1- line))\12      (recenter)\12\12      ;; Create highlight overlay for the line in main window\12      (let ((overlay (make-overlay (line-beginning-position) (line-end-position))))\12        (overlay-put overlay 'face '(:background \"#3a3a3a\" :foreground \"white\"))\12\12        ;; Store the overlay reference in the preview buffer for cleanup\12        (when preview-buf\12          (with-current-buffer preview-buf\12            (setq-local xref-preview-current-overlay overlay)))))))\12\12;; Emergency xref cleanup function\12(defun xref-preview-force-quit ()\12  \"Force quit any stuck xref preview buffer.\"\12  (interactive)\12  (let ((xref-buf (get-buffer \"*xref-preview*\")))\12    (when xref-buf\12      (with-current-buffer xref-buf\12        (set-buffer-modified-p nil))\12      (kill-buffer xref-buf)\12      (message \"Force-killed xref preview buffer\"))))\12\12;; Emergency keybinding\12(global-set-key (kbd \"C-c x q\") 'xref-preview-force-quit)\12\12;; Force override rectangle keymap by setting the keymap to nil first\12(define-key ctl-x-map \"r\" nil)\12\12;; Xref navigation keybindings\12(global-set-key (kbd \"C-x r\") 'xref-find-references-with-preview)\12(global-set-key (kbd \"C-x g\") 'xref-find-definitions-with-preview)\12\12;; Alternative keybindings\12(global-set-key (kbd \"C-c r\") 'xref-find-references-with-preview)\12(global-set-key (kbd \"C-c g\") 'xref-find-definitions-with-preview)\12")) 0] #9# 1] #8# 0] (keyword (:standard-properties [30 30 nil nil 46 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))