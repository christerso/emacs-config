;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[nil nil #2=(headline (:standard-properties [113 113 137 3820 3820 0 #1=(:title) nil element t nil 139 3818 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 3820 3820 0 nil org-data nil t nil 3 3820 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/c-cpp-support.org" :CATEGORY "c-cpp-support"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil nil #9=(headline (:standard-properties [949 949 968 2808 2808 0 #1# nil element t nil 970 2806 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 18) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [137 137 154 949 949 0 #1# section element t nil 156 947 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil [nil nil #16=(headline (:standard-properties [3550 3550 3584 3820 3820 0 #1# nil element t nil 3586 3818 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 33) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #14=(headline (:standard-properties [3177 3177 3206 3550 3550 0 #1# nil element t nil 3208 3548 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 28) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #12=(headline (:standard-properties [2808 2808 2827 3177 3177 0 #1# nil element t nil 2829 3175 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 18) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 31 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 113 113 0 nil first-section element t nil 1 113 nil nil nil nil #6#]))] :key "TITLE" :value "C/C++ Support Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [47 47 nil nil 92 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "C and C++ development support")) 0] [nil nil #2# 0] (keyword (:standard-properties [92 92 nil nil 113 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [31 31 nil nil 47 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[[nil nil #10=(section (:standard-properties [154 154 154 949 949 0 nil section element t nil 154 949 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [154 154 nil nil 949 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; C-specific settings\12(add-hook 'c-mode-hook\12          (lambda ()\12            (setq c-default-style \"k&r\")\12            (setq c-basic-offset 2)\12            ;; Disable flymake to prevent conflicts with eglot\12            (flymake-mode -1)\12            ;; Use only eglot for xref, no etags\12            (setq-local xref-backend-functions '(eglot-xref-backend))))\12\12;; Simple C build function\12(defun build-c-file ()\12  \"Build current C file.\"\12  (interactive)\12  (when (eq major-mode 'c-mode)\12    (let ((current-file (buffer-file-name)))\12      (when current-file\12        (compile (format \"clang -std=c11 -o %s %s\"\12                        (file-name-sans-extension (file-name-nondirectory current-file))\12                        (file-name-nondirectory current-file)))))))\12")) 0] [[nil nil (src-block (:standard-properties [968 968 nil nil 2808 1 nil planning element t nil nil nil nil nil nil nil #13=(section (:standard-properties [968 968 968 2808 2808 0 nil section element t nil 968 2808 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; C++-specific settings\12(add-hook 'c++-mode-hook\12          (lambda ()\12            (setq c-default-style \"stroustrup\")\12            (setq c-basic-offset 4)\12            ;; Disable flymake to prevent conflicts with eglot\12            (flymake-mode -1)\12            ;; Use only eglot for xref, no etags\12            (setq-local xref-backend-functions '(eglot-xref-backend))))\12\12;; File associations for C++\12(add-to-list 'auto-mode-alist '(\"\\\\.cpp\\\\'\" . c++-mode))\12(add-to-list 'auto-mode-alist '(\"\\\\.cxx\\\\'\" . c++-mode))\12(add-to-list 'auto-mode-alist '(\"\\\\.cc\\\\'\" . c++-mode))\12(add-to-list 'auto-mode-alist '(\"\\\\.hpp\\\\'\" . c++-mode))\12(add-to-list 'auto-mode-alist '(\"\\\\.hxx\\\\'\" . c++-mode))\12(add-to-list 'auto-mode-alist '(\"\\\\.h\\\\+\\\\+\\\\'\" . c++-mode))\12\12;; Simple C++ build function\12(defun build-cpp-file ()\12  \"Build current C++ file.\"\12  (interactive)\12  (when (eq major-mode 'c++-mode)\12    (let ((current-file (buffer-file-name)))\12      (when current-file\12        (compile (format \"clang++ -std=c++17 -o %s %s\"\12                        (file-name-sans-extension (file-name-nondirectory current-file))\12                        (file-name-nondirectory current-file)))))))\12\12;; Simple C++ run function\12(defun run-cpp-file ()\12  \"Run current C++ executable.\"\12  (interactive)\12  (when (eq major-mode 'c++-mode)\12    (let* ((current-file (buffer-file-name))\12           (exe-name (when current-file\12                       (file-name-sans-extension (file-name-nondirectory current-file)))))\12      (when exe-name\12        (if (file-exists-p (concat exe-name \".exe\"))\12            (async-shell-command (concat \"./\" exe-name \".exe\") \"*C++ Output*\")\12          (if (file-exists-p exe-name)\12              (async-shell-command (concat \"./\" exe-name) \"*C++ Output*\")\12            (message \"No executable found. Build first with F3.\")))))))\12")) 0] [nil nil #18=(section (:standard-properties [2827 2827 2827 3177 3177 0 nil section element t nil 2827 3177 nil nil nil nil #12#])) 0] #12# 0] #13# 0] [[[nil nil #14# 0] [nil nil (src-block (:standard-properties [3206 3206 nil nil 3550 1 nil planning element t nil nil nil nil nil nil nil #15=(section (:standard-properties [3206 3206 3206 3550 3550 0 nil section element t nil 3206 3550 nil nil nil nil #14#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Auto-save all files before compiling\12(setq compilation-ask-about-save nil)\12(setq compilation-save-buffers-predicate t)\12\12;; Navigate compilation errors with F8/Shift-F8\12(global-set-key [f8] 'next-error)\12(global-set-key [S-f8] 'previous-error)\12(message \"Auto-save on compile and error navigation configured\")\12")) 0] #15# 0] [nil [nil nil (src-block (:standard-properties [3584 3584 nil nil 3820 0 nil planning element t nil nil nil nil nil nil nil #17=(section (:standard-properties [3584 3584 3584 3820 3820 0 nil section element t nil 3584 3820 nil nil nil nil #16#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Header/Implementation switcher - use ff-find-other-file (built-in)\12(global-set-key (kbd \"C-x z\") 'ff-find-other-file)\12(message \"Header/implementation switcher (ff-find-other-file) configured (C-x z)\")\12")) 0] #17# 1] #16# 0] (src-block (:standard-properties [2827 2827 nil nil 3177 1 nil planning element t nil nil nil nil nil nil nil #18#] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Disable flymake to prevent conflicts with eglot\12(setq flymake-no-changes-timeout nil)\12(setq flymake-start-on-flymake-mode nil)\12(setq flymake-start-on-save-buffer nil)\12(with-eval-after-load 'flymake\12  (remove-hook 'flymake-diagnostic-functions 'flymake-cc))\12(message \"Flymake disabled to prevent eglot conflicts\")\12")) 0] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))