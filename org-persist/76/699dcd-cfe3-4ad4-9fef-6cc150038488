;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[nil nil #2=(headline (:standard-properties [121 121 152 5434 5434 0 #1=(:title) nil element t nil 154 5432 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 5434 5434 0 nil org-data nil t nil 3 5434 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/workspace-management.org" :CATEGORY "workspace-management"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 29) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil nil #9=(headline (:standard-properties [516 516 539 785 785 0 #1# nil element t nil 541 783 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [152 152 173 516 516 0 #1# section element t nil 175 514 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 20) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil [nil nil #16=(headline (:standard-properties [4511 4511 4520 5434 5434 0 #1# nil element t nil 4522 5432 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #14=(headline (:standard-properties [4218 4218 4243 4511 4511 0 #1# nil element t nil 4245 4509 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #12=(headline (:standard-properties [785 785 813 4218 4218 0 #1# nil element t nil 815 4216 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 27) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 38 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 121 121 0 nil first-section element t nil 1 121 nil nil nil nil #6#]))] :key "TITLE" :value "Workspace Management Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [54 54 nil nil 100 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Multi-project workspace system")) 0] [nil nil #2# 0] (keyword (:standard-properties [100 100 nil nil 121 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [38 38 nil nil 54 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[[nil nil #10=(section (:standard-properties [173 173 173 516 516 0 nil section element t nil 173 516 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [173 173 nil nil 516 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Install perspective.el for project workspaces\12(unless (package-installed-p 'perspective)\12  (package-install 'perspective))\12\12(require 'perspective)\12\12;; Configure perspective mode with proper prefix key\12(setq persp-mode-prefix-key (kbd \"C-c M-p\"))\12(setq persp-suppress-no-prefix-key-warning t)\12\12(persp-mode)\12")) 0] [[nil nil (src-block (:standard-properties [539 539 nil nil 785 1 nil planning element t nil nil nil nil nil nil nil #13=(section (:standard-properties [539 539 539 785 785 0 nil section element t nil 539 785 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Project workspace variables\12(defvar my-project-workspaces '()\12  \"List of active project workspaces with metadata.\")\12\12(defvar my-current-project-info nil\12  \"Current project information for mode line display.\")\12")) 0] [nil nil #18=(section (:standard-properties [813 813 813 4218 4218 0 nil section element t nil 813 4218 nil nil nil nil #12#])) 0] #12# 0] #13# 0] [[[nil nil #14# 0] [nil nil (src-block (:standard-properties [4243 4243 nil nil 4511 1 nil planning element t nil nil nil nil nil nil nil #15=(section (:standard-properties [4243 4243 4243 4511 4511 0 nil section element t nil 4243 4511 nil nil nil nil #14#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Key bindings for project workspace management\12(global-set-key (kbd \"C-c w c\") 'my-create-project-workspace)\12(global-set-key (kbd \"C-c w s\") 'my-switch-project-workspace)\12(global-set-key (kbd \"C-c w l\") 'my-list-project-workspaces)\12")) 0] #15# 0] [nil [nil nil (src-block (:standard-properties [4520 4520 nil nil 5434 0 nil planning element t nil nil nil nil nil nil nil #17=(section (:standard-properties [4520 4520 4520 5434 5434 0 nil section element t nil 4520 5434 nil nil nil nil #16#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-workspace-management-module ()\12  \"Test workspace management module.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test function definitions\12    (dolist (func '(my-create-project-workspace my-switch-project-workspace my-list-project-workspaces))\12      (if (fboundp func)\12          (push (format \"%s: DEFINED\" func) results)\12        (push (format \"%s: MISSING\" func) results)))\12\12    ;; Test perspective\12    (if (featurep 'perspective)\12        (push \"perspective: LOADED\" results)\12      (push \"perspective: NOT LOADED\" results))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Workspace Test*\")\12      (erase-buffer)\12      (insert \"=== Workspace Management Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (display-buffer (current-buffer)))\12\12    (message \"Workspace management test completed\")))\12")) 0] #17# 1] #16# 0] (src-block (:standard-properties [813 813 nil nil 4218 1 nil planning element t nil nil nil nil nil nil nil #18#] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Project color assignment for visual distinction\12(defun my-assign-project-color (project-name)\12  \"Assign a unique color to a project based on its name.\"\12  (let ((colors '(\"#569cd6\" \"#4ec9b0\" \"#ce9178\" \"#c586c0\" \"#dcdcaa\"\12                  \"#b5cea8\" \"#9cdcfe\" \"#f44747\" \"#ff6b6b\" \"#4ecdc4\")))\12    (nth (mod (string-hash project-name) (length colors)) colors)))\12\12;; Create project workspace\12(defun my-create-project-workspace (project-path &optional workspace-name)\12  \"Create a new workspace for a project with visual identification.\"\12  (interactive (list (read-directory-name \"Project directory: \")\12                     (read-string \"Workspace name (optional): \")))\12  (let* ((project-name (or (and (not (string-empty-p workspace-name)) workspace-name)\12                          (file-name-nondirectory (directory-file-name project-path))))\12         (workspace-id (format \"%s\" project-name))\12         (project-color (my-assign-project-color project-name)))\12\12    ;; Create or switch to perspective\12    (persp-switch workspace-id)\12\12    ;; Store project metadata\12    (setq my-current-project-info\12          `(:name ,project-name\12            :path ,project-path\12            :color ,project-color\12            :workspace ,workspace-id))\12\12    ;; Add to workspace list if not already there\12    (unless (assoc workspace-id my-project-workspaces)\12      (push (cons workspace-id my-current-project-info) my-project-workspaces))\12\12    ;; Open project files\12    (dired project-path)\12\12    (message \"Created workspace '%s' for project '%s'\" workspace-id project-name)))\12\12;; Switch between workspaces\12(defun my-switch-project-workspace ()\12  \"Switch between active project workspaces with preview.\"\12  (interactive)\12  (let* ((workspace-choices (mapcar (lambda (ws)\12                                     (let ((info (cdr ws)))\12                                       (format \"%s (%s)\"\12                                              (car ws)\12                                              (plist-get info :path))))\12                                   my-project-workspaces))\12         (choice (completing-read \"Switch to workspace: \" workspace-choices)))\12    (when choice\12      (let* ((workspace-name (car (split-string choice \" (\")))\12             (workspace-info (cdr (assoc workspace-name my-project-workspaces))))\12        (persp-switch workspace-name)\12        (setq my-current-project-info workspace-info)\12        (message \"Switched to workspace: %s\" workspace-name)))))\12\12;; List workspaces\12(defun my-list-project-workspaces ()\12  \"Show all active project workspaces in a buffer.\"\12  (interactive)\12  (let ((buffer (get-buffer-create \"*Project Workspaces*\")))\12    (with-current-buffer buffer\12      (erase-buffer)\12      (insert \"=== Active Project Workspaces ===\\n\\n\")\12      (if my-project-workspaces\12          (dolist (ws my-project-workspaces)\12            (let* ((workspace-name (car ws))\12                   (info (cdr ws))\12                   (project-name (plist-get info :name))\12                   (project-path (plist-get info :path))\12                   (project-color (plist-get info :color)))\12              (insert (format \"[%s] %s\\n    Path: %s\\n    Color: %s\\n\\n\"\12                             workspace-name project-name project-path project-color))))\12        (insert \"No active project workspaces.\\n\"))\12      (goto-char (point-min))\12      (read-only-mode 1))\12    (display-buffer buffer)))\12")) 0] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))