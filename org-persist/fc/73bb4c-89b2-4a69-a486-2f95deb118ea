;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[nil nil #2=(headline (:standard-properties [160 160 193 7567 7567 0 #1=(:title) nil element t nil 195 7565 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 7567 7567 0 nil org-data nil t nil 3 7567 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/project-builds.org" :CATEGORY "project-builds"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 31) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil nil #9=(headline (:standard-properties [1082 1082 1111 1598 1598 0 #1# nil element t nil 1113 1596 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 28) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [193 193 221 1082 1082 0 #1# section element t nil 223 1080 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 27) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [[nil nil #14=(headline (:standard-properties [2392 2392 2414 3238 3238 0 #1# nil element t nil 2416 3236 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil [nil nil #19=(headline (:standard-properties [6644 6644 6653 7567 7567 0 #1# nil element t nil 6655 7565 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #17=(headline (:standard-properties [3812 3812 3839 6644 6644 0 #1# nil element t nil 3841 6642 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 26) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #16=(headline (:standard-properties [3238 3238 3263 3812 3812 0 #1# nil element t nil 3265 3810 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #12=(headline (:standard-properties [1598 1598 1643 2392 2392 0 #1# nil element t nil 1645 2390 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 44) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 43 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 160 160 0 nil first-section element t nil 1 160 nil nil nil nil #6#]))] :key "TITLE" :value "Project-Specific Build Functions")) 0] #7# 0] [[nil nil (keyword (:standard-properties [59 59 nil nil 139 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Hardcoded build functions for rift, arc, and autonomica projects")) 0] [nil nil #2# 0] (keyword (:standard-properties [139 139 nil nil 160 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [43 43 nil nil 59 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil #10=(section (:standard-properties [221 221 221 1082 1082 0 nil section element t nil 221 1082 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [221 221 nil nil 1082 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun build-rift ()\12  \"Build rift C project with CMake.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/rift/\"))\12    (compile \"cmake --build build --config Release\")))\12\12(defun build-rift-debug ()\12  \"Build rift C project with CMake debug.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/rift/\"))\12    (compile \"cmake --build build --config Debug\")))\12\12(defun run-rift ()\12  \"Run rift executable.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/rift/\"))\12    (async-shell-command \"./build/Release/rift.exe\" \"*Rift Output*\")))\12\12(defun debug-rift ()\12  \"Debug rift with RemedyBG.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/rift/\"))\12    (if (file-exists-p \"C:/remedybg.exe\")\12        (async-shell-command \"C:/remedybg.exe ./build/Release/rift.exe\")\12      (message \"RemedyBG not found at C:/remedybg.exe\"))))\12")) 0] [[nil nil (src-block (:standard-properties [1111 1111 nil nil 1598 1 nil planning element t nil nil nil nil nil nil nil #13=(section (:standard-properties [1111 1111 1111 1598 1598 0 nil section element t nil 1111 1598 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun build-arc ()\12  \"Build arc Go project.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/arc/\"))\12    (compile \"go build -v .\")))\12\12(defun run-arc ()\12  \"Run arc game.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/arc/\"))\12    (async-shell-command \"go run .\" \"*Arc Output*\")))\12\12(defun debug-arc ()\12  \"Debug arc with delve.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/arc/\"))\12    (async-shell-command \"dlv debug\" \"*Arc Debug*\")))\12")) 0] [nil nil #22=(section (:standard-properties [1643 1643 1643 2392 2392 0 nil section element t nil 1643 2392 nil nil nil nil #12#])) 0] #12# 0] #13# 0] #8# 0] [[[[nil nil #14# 0] [nil nil (src-block (:standard-properties [2414 2414 nil nil 3238 1 nil planning element t nil nil nil nil nil nil nil #15=(section (:standard-properties [2414 2414 2414 3238 3238 0 nil section element t nil 2414 3238 nil nil nil nil #14#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun build-nan ()\12  \"Build nan Odin project.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/nan/src/\"))\12    (compile \"odin build . -out:nan.exe\")))\12\12(defun build-nan-debug ()\12  \"Build nan Odin project with debug info for RemedyBG.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/nan/src/\"))\12    (compile \"odin build . -out:nan.exe -debug\")))\12\12(defun run-nan ()\12  \"Run nan executable.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/nan/src/\"))\12    (async-shell-command \"nan.exe\" \"*Nan Output*\")))\12\12(defun debug-nan ()\12  \"Debug nan with RemedyBG.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/nan/src/\"))\12    (if (file-exists-p \"C:/remedybg.exe\")\12        (async-shell-command \"C:/remedybg.exe nan.exe\")\12      (message \"RemedyBG not found at C:/remedybg.exe\"))))\12")) 0] #15# 0] [[nil nil #18=(section (:standard-properties [3263 3263 3263 3812 3812 0 nil section element t nil 3263 3812 nil nil nil nil #16#])) 0] [nil nil #17# 0] (src-block (:standard-properties [3263 3263 nil nil 3812 1 nil planning element t nil nil nil nil nil nil nil #18#] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun build-gridborn ()\12  \"Build gridborn Go project.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/gridborn/\"))\12    (compile \"go build -v .\")))\12\12(defun run-gridborn ()\12  \"Run gridborn application.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/gridborn/\"))\12    (async-shell-command \"go run .\" \"*Gridborn Output*\")))\12\12(defun debug-gridborn ()\12  \"Debug gridborn with delve.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/gridborn/\"))\12    (async-shell-command \"dlv debug\" \"*Gridborn Debug*\")))\12")) 0] #16# 0] [[nil nil (src-block (:standard-properties [3839 3839 nil nil 6644 1 nil planning element t nil nil nil nil nil nil nil #21=(section (:standard-properties [3839 3839 3839 6644 6644 0 nil section element t nil 3839 6644 nil nil nil nil #17#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun detect-current-project ()\12  \"Detect which project we're currently in based on file path.\"\12  (let ((current-path (or (buffer-file-name) default-directory)))\12    (cond\12     ((string-match-p \"rift\" current-path) 'rift)\12     ((string-match-p \"arc\" current-path) 'arc)\12     ((string-match-p \"autonomica\" current-path) 'autonomica)\12     ((string-match-p \"nan\" current-path) 'nan)\12     ((string-match-p \"gridborn\" current-path) 'gridborn)\12     (t nil))))\12\12(defun smart-project-build ()\12  \"Build current project based on location.\"\12  (interactive)\12  (let ((project (detect-current-project)))\12    (cond\12     ((eq project 'rift) (build-rift))\12     ((eq project 'arc) (build-arc))\12     ((eq project 'autonomica) (build-autonomica))\12     ((eq project 'nan) (build-nan))\12     ((eq project 'gridborn) (build-gridborn))\12     (t (message \"Unknown project - not in rift, arc, autonomica, nan, or gridborn directory\")))))\12\12(defun smart-project-build-debug ()\12  \"Build current project in debug mode based on location.\"\12  (interactive)\12  (let ((project (detect-current-project)))\12    (cond\12     ((eq project 'rift) (build-rift-debug))\12     ((eq project 'arc) (build-arc-debug))\12     ((eq project 'autonomica) (build-autonomica-debug))\12     ((eq project 'nan) (build-nan-debug))\12     ((eq project 'gridborn) (build-gridborn-debug))\12     (t (message \"Unknown project - not in rift, arc, autonomica, nan, or gridborn directory\")))))\12\12(defun smart-project-run ()\12  \"Run current project based on location.\"\12  (interactive)\12  (let ((project (detect-current-project)))\12    (cond\12     ((eq project 'rift) (run-rift))\12     ((eq project 'arc) (run-arc))\12     ((eq project 'autonomica) (run-autonomica))\12     ((eq project 'nan) (run-nan))\12     ((eq project 'gridborn) (run-gridborn))\12     (t (message \"Unknown project - not in rift, arc, autonomica, nan, or gridborn directory\")))))\12\12(defun smart-project-debug ()\12  \"Debug current project based on location.\"\12  (interactive)\12  (let ((project (detect-current-project)))\12    (cond\12     ((eq project 'rift) (debug-rift))\12     ((eq project 'arc) (debug-arc))\12     ((eq project 'autonomica) (debug-autonomica))\12     ((eq project 'nan) (debug-nan))\12     ((eq project 'gridborn) (debug-gridborn))\12     (t (message \"Unknown project - not in rift, arc, autonomica, nan, or gridborn directory\")))))\12\12;; Key bindings for smart project system\12(global-set-key [f3] 'smart-project-build)        ; F3 = Build current project\12(global-set-key [S-f3] 'smart-project-build-debug) ; Shift+F3 = Debug build current project\12(global-set-key [f4] 'smart-project-run)          ; F4 = Run current project\12(global-set-key [S-f4] 'smart-project-debug)      ; Shift+F4 = Debug current project\12\12(message \"Smart project build system configured for rift, arc, and autonomica\")\12")) 0] [nil [nil nil (src-block (:standard-properties [6653 6653 nil nil 7567 0 nil planning element t nil nil nil nil nil nil nil #20=(section (:standard-properties [6653 6653 6653 7567 7567 0 nil section element t nil 6653 7567 nil nil nil nil #19#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-project-builds ()\12  \"Test project build system.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test project detection\12    (push (format \"Current project: %s\" (detect-current-project)) results)\12\12    ;; Test function definitions\12    (dolist (func '(build-rift run-rift debug-rift\12                    build-arc run-arc debug-arc\12                    build-autonomica run-autonomica debug-autonomica))\12      (if (fboundp func)\12          (push (format \"%s: DEFINED\" func) results)\12        (push (format \"%s: MISSING\" func) results)))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Project Builds Test*\")\12      (erase-buffer)\12      (insert \"=== Project Build System Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (display-buffer (current-buffer)))\12\12    (message \"Project builds test completed\")))\12")) 0] #20# 1] #19# 1] #21# 0] (src-block (:standard-properties [1643 1643 nil nil 2392 1 nil planning element t nil nil nil nil nil nil nil #22#] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun build-autonomica ()\12  \"Build autonomica C++ project with CMake.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/autonomica/\"))\12    (compile \"cmake --build build --config Release\")))\12\12(defun run-autonomica ()\12  \"Run autonomica executable.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/autonomica/\"))\12    (async-shell-command \"./build/Release/autonomica.exe\" \"*Autonomica Output*\")))\12\12(defun debug-autonomica ()\12  \"Debug autonomica with RemedyBG.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/autonomica/\"))\12    (if (file-exists-p \"C:/remedybg.exe\")\12        (async-shell-command \"C:/remedybg.exe ./build/Release/autonomica.exe\")\12      (message \"RemedyBG not found at C:/remedybg.exe\"))))\12")) 0] nil nil 0] org-element--cache-compare)) ((version "2.3")))