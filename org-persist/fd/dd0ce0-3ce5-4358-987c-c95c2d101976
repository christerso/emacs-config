;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #2=(headline (:standard-properties [141 141 167 5802 5802 0 #1=(:title) nil element t nil 169 5800 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 5802 5802 0 nil org-data nil t nil 3 5802 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/windows-unicode-fix.org" :CATEGORY "windows-unicode-fix"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 24) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [[nil nil #9=(headline (:standard-properties [2048 2048 2073 3200 3200 0 #1# nil element t nil 2075 3198 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil nil #13=(headline (:standard-properties [4785 4785 4810 5802 5802 0 #1# nil element t nil 4812 5800 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #12=(headline (:standard-properties [3200 3200 3232 4785 4785 0 #1# nil element t nil 3234 4783 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 31) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [167 167 197 2048 2048 0 #1# section element t nil 199 2046 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 37 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 141 141 0 nil first-section element t nil 1 141 nil nil nil nil #6#]))] :key "TITLE" :value "Windows Unicode Fix Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [53 53 nil nil 120 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Proper Unicode support for Emacs 30.2 on Windows 11")) 0] [nil nil #2# 0] (keyword (:standard-properties [120 120 nil nil 141 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [37 37 nil nil 53 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil #10=(section (:standard-properties [197 197 197 2048 2048 0 nil section element t nil 197 2048 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [197 197 nil nil 2048 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Windows 11 + Emacs 30.2 specific Unicode configuration\12(when (eq system-type 'windows-nt)\12  ;; Force UTF-8 everywhere\12  (set-language-environment \"UTF-8\")\12  (setq locale-coding-system 'utf-8)\12  (set-default-coding-systems 'utf-8)\12  (set-terminal-coding-system 'utf-8)\12  (set-keyboard-coding-system 'utf-8)\12  (set-selection-coding-system 'utf-8)\12  (prefer-coding-system 'utf-8)\12\12  ;; Critical Windows 11 Unicode settings\12  (setq w32-unicode-filenames t)\12  (setq w32-enable-unicode-output t)\12  (setq inhibit-compacting-font-caches t)\12  (setq use-default-font-for-symbols nil)\12\12  ;; Configure emoji and symbol fontsets for Windows 11\12  (set-fontset-font t 'emoji\12                    (cond\12                     ((member \"Segoe UI Emoji\" (font-family-list)) \"Segoe UI Emoji\")\12                     ((member \"Noto Color Emoji\" (font-family-list)) \"Noto Color Emoji\")\12                     ((member \"Apple Color Emoji\" (font-family-list)) \"Apple Color Emoji\")))\12\12  (set-fontset-font t 'symbol\12                    (cond\12                     ((member \"Segoe UI Symbol\" (font-family-list)) \"Segoe UI Symbol\")\12                     ((member \"Symbola\" (font-family-list)) \"Symbola\")))\12\12  ;; Specific Unicode ranges for Windows 11\12  (set-fontset-font t '(#x1F300 . #x1F5FF) \"Segoe UI Symbol\")   ; Misc symbols\12  (set-fontset-font t '(#x1F600 . #x1F64F) \"Segoe UI Emoji\")    ; Emoticons\12  (set-fontset-font t '(#x1F680 . #x1F6FF) \"Segoe UI Emoji\")    ; Transport\12  (set-fontset-font t '(#x2190 . #x21FF) \"Segoe UI Symbol\")     ; Arrows\12  (set-fontset-font t '(#x2200 . #x22FF) \"Segoe UI Symbol\")     ; Math operators\12  (set-fontset-font t '(#x2500 . #x257F) \"Segoe UI Symbol\")     ; Box drawing\12  (set-fontset-font t '(#x2600 . #x26FF) \"Segoe UI Symbol\")     ; Misc symbols\12\12  (message \"Windows 11 Unicode configuration applied\"))\12")) 0] [[[nil nil (src-block (:standard-properties [2073 2073 nil nil 3200 1 nil planning element t nil nil nil nil nil nil nil #16=(section (:standard-properties [2073 2073 2073 3200 3200 0 nil section element t nil 2073 3200 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-unicode-display ()\12  \"Test Unicode character display in current buffer.\"\12  (interactive)\12  (let ((test-chars '(\"→\" \"←\" \"↑\" \"↓\" \"•\" \"◦\" \"✓\" \"✗\" \"≠\" \"≤\" \"≥\" \"α\" \"β\" \"γ\" \"λ\" \"π\")))\12    (with-current-buffer (get-buffer-create \"*Unicode Test*\")\12      (erase-buffer)\12      (insert \"=== Unicode Display Test ===\\n\\n\")\12      (insert \"If you see squares or missing characters, Unicode is not working properly.\\n\\n\")\12\12      (dolist (char test-chars)\12        (insert (format \"%s - U+%04X - %s\\n\"\12                        char\12                        (string-to-char char)\12                        (char-to-name (string-to-char char)))))\12\12      (insert \"\\n=== Math and Technical Symbols ===\\n\")\12      (insert \"∀ ∃ ∈ ∉ ∪ ∩ ⊂ ⊃ ⊆ ⊇ ∧ ∨ ¬ ⇒ ⇔\\n\")\12\12      (insert \"\\n=== Box Drawing ===\\n\")\12      (insert \"┌─┐ │ │ └─┘ ┬ ┴ ├ ┤ ┼\\n\")\12\12      (goto-char (point-min))\12      (display-buffer (current-buffer))\12      (select-window (get-buffer-window (current-buffer))))\12\12    (message \"Unicode test buffer created - check for proper symbol display\")))\12\12(global-set-key (kbd \"C-c u t\") 'test-unicode-display)\12")) 0] [nil nil #15=(section (:standard-properties [3232 3232 3232 4785 4785 0 nil section element t nil 3232 4785 nil nil nil nil #12#])) 0] #12# 0] [[nil nil #13# 0] [nil nil (src-block (:standard-properties [4810 4810 nil nil 5802 0 nil planning element t nil nil nil nil nil nil nil #14=(section (:standard-properties [4810 4810 4810 5802 5802 0 nil section element t nil 4810 5802 nil nil nil nil #13#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun fix-unicode-everywhere ()\12  \"Apply Unicode fix to all modes and buffers.\"\12  (interactive)\12  ;; Re-apply Windows Unicode configuration\12  (when (eq system-type 'windows-nt)\12    ;; Force fontset reconfiguration\12    (set-fontset-font t 'emoji \"Segoe UI Emoji\" nil 'prepend)\12    (set-fontset-font t 'symbol \"Segoe UI Symbol\" nil 'prepend)\12\12    ;; Force specific ranges\12    (set-fontset-font t '(#x2190 . #x21FF) \"Segoe UI Symbol\" nil 'prepend) ; Arrows\12    (set-fontset-font t '(#x2022 . #x2022) \"Segoe UI Symbol\" nil 'prepend) ; Bullet\12    (set-fontset-font t '(#x2713 . #x2713) \"Segoe UI Symbol\" nil 'prepend) ; Check mark\12\12    ;; Refresh all buffers\12    (dolist (buffer (buffer-list))\12      (with-current-buffer buffer\12        (when (derived-mode-p 'prog-mode 'text-mode 'org-mode)\12          (font-lock-fontify-buffer))))\12\12    (redraw-display)\12    (message \"Unicode fix applied to all buffers\")))\12\12(global-set-key (kbd \"C-c u f\") 'fix-unicode-everywhere)\12")) 0] #14# 0] (src-block (:standard-properties [3232 3232 nil nil 4785 1 nil planning element t nil nil nil nil nil nil nil #15#] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun debug-font-unicode ()\12  \"Debug font and Unicode configuration.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Check available fonts\12    (push (format \"Available fonts: %d\" (length (font-family-list))) results)\12\12    ;; Check specific fonts\12    (dolist (font '(\"JetBrainsMono Nerd Font\" \"Segoe UI Emoji\" \"Segoe UI Symbol\"))\12      (if (member font (font-family-list))\12          (push (format \"%s: AVAILABLE\" font) results)\12        (push (format \"%s: MISSING\" font) results)))\12\12    ;; Check current fontset for specific characters\12    (let ((arrow-font (fontset-font t ?→))\12          (bullet-font (fontset-font t ?•))\12          (check-font (fontset-font t ?✓)))\12      (push (format \"Arrow (→) font: %s\" arrow-font) results)\12      (push (format \"Bullet (•) font: %s\" bullet-font) results)\12      (push (format \"Check (✓) font: %s\" check-font) results))\12\12    ;; Check coding systems\12    (push (format \"Default coding: %s\" default-buffer-file-coding-system) results)\12    (push (format \"Terminal coding: %s\" terminal-coding-system) results)\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Font Unicode Debug*\")\12      (erase-buffer)\12      (insert \"=== Font and Unicode Debug ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (goto-char (point-min))\12      (display-buffer (current-buffer))\12      (select-window (get-buffer-window (current-buffer))))\12\12    (message \"Font Unicode debug completed\")))\12\12(global-set-key (kbd \"C-c u d\") 'debug-font-unicode)\12")) 0] #16# 1] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))