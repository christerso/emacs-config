;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[nil [nil nil #8=(headline (:standard-properties [139 139 159 3287 3287 0 #1=(:title) section element t nil 161 3285 2 nil nil nil #5=(headline (:standard-properties [116 116 139 3287 3287 0 #1# nil element t nil 141 3285 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 3287 3287 0 nil org-data nil t nil 3 3287 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/odin-support.org" :CATEGORY "odin-support"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 21) t] :title #2=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #3=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #4=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 19) t] :title #2# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #3# :archivedp #4# :commentedp nil)) 0] #5# 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 30 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 116 116 0 nil first-section element t nil 1 116 nil nil nil nil #6#]))] :key "TITLE" :value "Odin Support Module")) 0] #7# 0] [[[nil nil (keyword (:standard-properties [46 46 nil nil 95 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Odin language development support")) 0] [nil nil #5# 0] (keyword (:standard-properties [95 95 nil nil 116 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] [nil [nil nil (src-block (:standard-properties [159 159 nil nil 3287 0 nil planning element t nil nil nil nil nil nil nil #9=(section (:standard-properties [159 159 159 3287 3287 0 nil section element t nil 159 3287 nil nil nil nil #8#]))] :language "emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Download odin-mode if needed\12(let ((odin-mode-dir (expand-file-name \"odin-mode\" user-emacs-directory))\12      (odin-mode-file (expand-file-name \"odin-mode/odin-mode.el\" user-emacs-directory)))\12  (unless (file-exists-p odin-mode-file)\12    (make-directory odin-mode-dir t)\12    (url-copy-file \"https://raw.githubusercontent.com/mattt-b/odin-mode/master/odin-mode.el\"\12                   odin-mode-file t))\12  (load-file odin-mode-file)\12  (require 'odin-mode))\12\12;; Configure file associations for Odin\12(add-to-list 'auto-mode-alist '(\"\\\\.odin\\\\'\" . odin-mode))\12\12;; Odin-specific settings with xref support\12(add-hook 'odin-mode-hook\12          (lambda ()\12            ;; Enable xref for Odin files\12            (setq-local xref-backend-functions '(etags--xref-backend))\12            (message \"Odin mode loaded with xref support\")))\12\12;; Configure ols for Odin (found in your repos!)\12(let ((ols-path \"G:/repos/ols/ols.exe\"))\12  (when (and ols-path (file-exists-p ols-path))\12    ;; Check if eglot is available before configuring\12    (when (featurep 'eglot)\12      (add-to-list 'eglot-server-programs `(odin-mode . (,ols-path)))\12      (add-hook 'odin-mode-hook 'eglot-ensure)\12      (message \"ols configured at: %s\" ols-path))\12    (unless (featurep 'eglot)\12      (message \"eglot not loaded - ols LSP support disabled\")))\12  (unless (and ols-path (file-exists-p ols-path))\12    (message \"ols not found - install from https://github.com/DanielGavin/ols\")))\12\12;; Simple Odin build function\12(defun build-odin-file ()\12  \"Build current Odin file or project.\"\12  (interactive)\12  (when (eq major-mode 'odin-mode)\12    (let* ((project-root default-directory)\12           (odin-files (directory-files project-root nil \"\\\\.odin$\"))\12           (project-name (file-name-nondirectory (directory-file-name project-root))))\12      (if (> (length odin-files) 1)\12          (compile (format \"odin build . -out:%s\" project-name))\12        (let ((current-file (buffer-file-name)))\12          (when current-file\12            (compile (format \"odin build %s -file -out:%s\"\12                            (file-name-nondirectory current-file)\12                            (file-name-sans-extension (file-name-nondirectory current-file))))))))))\12\12;; Simple Odin run function\12(defun run-odin-file ()\12  \"Run current Odin file or project.\"\12  (interactive)\12  (when (eq major-mode 'odin-mode)\12    (let* ((project-root default-directory)\12           (odin-files (directory-files project-root nil \"\\\\.odin$\"))\12           (project-name (file-name-nondirectory (directory-file-name project-root))))\12      (if (> (length odin-files) 1)\12          (async-shell-command (format \"odin run . -out:%s\" project-name) \"*Odin Output*\")\12        (let ((current-file (buffer-file-name)))\12          (when current-file\12            (async-shell-command (format \"odin run %s -file -out:%s\"\12                                        (file-name-nondirectory current-file)\12                                        (file-name-sans-extension (file-name-nondirectory current-file)))\12                                \"*Odin Output*\")))))))\12\12(message \"Odin development support configured\")\12")) 0] #9# 1] #8# 0] (keyword (:standard-properties [30 30 nil nil 46 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))