;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #7=(headline (:standard-properties [142 142 156 1658 1658 0 #1=(:title) nil element t nil 158 1656 1 nil nil nil #2=(org-data (:standard-properties [1 1 1 3551 3551 0 nil org-data nil t nil 3 3551 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/config.org" :CATEGORY "config"))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 13) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil nil #9=(headline (:standard-properties [2036 2036 2052 3551 3551 0 #1# nil element t nil 2054 3549 1 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 15) t] :title #3# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [1658 1658 1679 2036 2036 0 #1# nil element t nil 1681 2034 1 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 20) t] :title #3# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #2# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 44 0 nil top-comment element t nil nil nil nil nil nil nil #6=(section (:standard-properties [1 1 1 142 142 0 nil first-section element t nil 1 142 nil nil nil nil #2#]))] :key "TITLE" :value "Clean Modular Emacs Configuration")) 0] #6# 0] [[nil nil (keyword (:standard-properties [60 60 nil nil 121 0 nil nil element t nil nil nil nil nil nil nil #6#] :key "DESCRIPTION" :value "Minimal config that loads tested modules only")) 0] [nil nil #7# 0] (keyword (:standard-properties [121 121 nil nil 142 1 nil nil element t nil nil nil nil nil nil nil #6#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [44 44 nil nil 60 0 nil nil element t nil nil nil nil nil nil nil #6#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil (src-block (:standard-properties [156 156 nil nil 1658 1 nil planning element t nil nil nil nil nil nil nil #13=(section (:standard-properties [156 156 156 1658 1658 0 nil section element t nil 156 1658 nil nil nil nil #7#]))] :language #10="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Basic settings\12(setq inhibit-startup-message t)\12(setq initial-scratch-message nil)\12(menu-bar-mode -1)\12(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))\12(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))\12(global-display-line-numbers-mode 1)\12\12;; No prompts\12(setq confirm-kill-emacs nil)\12(setq kill-buffer-query-functions nil)\12\12;; Never ask about killing modified buffers\12(setq kill-buffer-query-functions\12      (remq 'process-kill-buffer-query-function\12            kill-buffer-query-functions))\12(global-set-key (kbd \"C-x k\")\12                (lambda ()\12                  (interactive)\12                  (kill-buffer (current-buffer))))\12\12;; Dashboard\12(setq initial-major-mode 'org-mode)\12(setq initial-buffer-choice\12      (lambda ()\12        (let ((dashboard-file (expand-file-name \"dashboard.org\" user-emacs-directory)))\12          (if (file-exists-p dashboard-file)\12              (find-file-noselect dashboard-file)\12            (get-buffer-create \"*Dashboard*\")))))\12\12(defun open-dashboard ()\12  \"Open dashboard.\"\12  (interactive)\12  (find-file (expand-file-name \"dashboard.org\" user-emacs-directory)))\12\12;; Essential keys\12(global-set-key (kbd \"C-c d\") 'open-dashboard)\12(global-set-key (kbd \"C-x C-r\") 'recentf-open-files)\12\12(recentf-mode 1)\12(setq recentf-max-saved-items 100)\12(setq recentf-auto-cleanup 'never)\12(unless recentf-list\12  (recentf-load-list))\12\12;; LSP and completion will be handled by modules only\12\12;; F3 key binding will be handled by project-builds module\12")) 0] [nil nil #12=(section (:standard-properties [1679 1679 1679 2036 2036 0 nil section element t nil 1679 2036 nil nil nil nil #8#])) 0] #8# 0] [[nil nil #9# 0] [nil nil (src-block (:standard-properties [2052 2052 nil nil 3551 0 nil planning element t nil nil nil nil nil nil nil #11=(section (:standard-properties [2052 2052 2052 3551 3551 0 nil section element t nil 2052 3551 nil nil nil nil #9#]))] :language #10# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Create modules directory if it doesn't exist\12(let ((modules-dir (expand-file-name \"modules\" user-emacs-directory)))\12  (unless (file-directory-p modules-dir)\12    (make-directory modules-dir t)))\12\12;; Load ALL essential modules safely\12(dolist (module '(\"core-packages\"     ; Vertico, Consult, Company\12                  \"theme-system\"       ; Dark theme and colors\12                  \"font-system\"        ; Font enforcement\12                  \"language-support\"   ; Odin, C, CMake, Go\12                  \"file-management\"    ; Treemacs, Everything search\12                  \"window-navigation\"  ; Window movement\12                  \"workspace-management\" ; Project workspaces\12                  \"windows-unicode-fix\" ; Unicode support\12                  \"auto-focus\"         ; Auto focus behavior\12                  \"odin-unicode\"       ; Odin-specific Unicode fixes\12                  \"project-builds\"))   ; F3/F4 smart project build system\12  (let ((module-file (expand-file-name (concat \"modules/\" module \".org\") user-emacs-directory)))\12    (when (file-exists-p module-file)\12      (condition-case err\12          (progn\12            ;; Ensure we're in the right directory for org-babel\12            (let ((default-directory user-emacs-directory))\12              (org-babel-load-file module-file))\12            (message \"✓ LOADED: %s\" module))\12        (error\12         (message \"✗ FAILED: %s - %s\" module (error-message-string err)))))))\12\12(message \"=== CONFIG LOADING COMPLETE ===\")\12")) 0] #11# 0] (src-block (:standard-properties [1679 1679 nil nil 2036 1 nil planning element t nil nil nil nil nil nil nil #12#] :language #10# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(require 'package)\12(setq package-archives\12      '((\"gnu\" . \"https://elpa.gnu.org/packages/\")\12        (\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\")\12        (\"melpa\" . \"https://melpa.org/packages/\")))\12(setq package-check-signature nil)\12(package-initialize)\12(when (not package-archive-contents)\12  (package-refresh-contents))\12")) 0] #13# 0] nil nil 0] org-element--cache-compare)) ((version "2.3")))