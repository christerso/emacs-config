;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #2=(headline (:standard-properties [118 118 147 6248 6248 0 #1=(:title) nil element t nil 149 6246 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 6248 6248 0 nil org-data nil t nil 3 6248 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/core-packages.org" :CATEGORY "core-packages"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 27) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil nil #9=(headline (:standard-properties [5337 5337 5352 6248 6248 0 #1# nil element t nil 5354 6246 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [147 147 169 5337 5337 0 #1# section element t nil 171 5335 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 31 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 118 118 0 nil first-section element t nil 1 118 nil nil nil nil #6#]))] :key "TITLE" :value "Core Packages Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [47 47 nil nil 97 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Essential packages for development")) 0] [nil nil #2# 0] (keyword (:standard-properties [97 97 nil nil 118 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [31 31 nil nil 47 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[nil nil #11=(section (:standard-properties [169 169 169 5337 5337 0 nil section element t nil 169 5337 nil nil nil nil #8#])) 0] [[nil nil #9# 0] [nil nil (src-block (:standard-properties [5352 5352 nil nil 6248 0 nil planning element t nil nil nil nil nil nil nil #10=(section (:standard-properties [5352 5352 5352 6248 6248 0 nil section element t nil 5352 6248 nil nil nil nil #9#]))] :language #12="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-core-packages-module ()\12  \"Test core packages module functionality.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test package availability\12    (dolist (pkg '(projectile vertico consult marginalia orderless))\12      (if (featurep pkg)\12          (push (format \"%s: LOADED\" pkg) results)\12        (push (format \"%s: NOT LOADED\" pkg) results)))\12\12    ;; Test key bindings\12    (dolist (key '(\"M-x\" \"C-x b\" \"C-s\"))\12      (let ((binding (key-binding (kbd key))))\12        (push (format \"%s -> %s\" key binding) results)))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Core Packages Test*\")\12      (erase-buffer)\12      (insert \"=== Core Packages Module Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (display-buffer (current-buffer)))\12\12    (message \"Core packages test completed\")))\12")) 0] #10# 0] (src-block (:standard-properties [169 169 nil nil 5337 1 nil planning element t nil nil nil nil nil nil nil #11#] :language #12# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Projectile for project management\12(unless (package-installed-p 'projectile)\12  (package-install 'projectile))\12\12(require 'projectile)\12(projectile-mode +1)\12\12;; Vertico ecosystem - modern completion\12(unless (package-installed-p 'vertico)\12  (package-install 'vertico))\12\12(unless (package-installed-p 'consult)\12  (package-install 'consult))\12\12(unless (package-installed-p 'marginalia)\12  (package-install 'marginalia))\12\12(unless (package-installed-p 'orderless)\12  (package-install 'orderless))\12\12;; Load and configure\12(require 'vertico)\12(require 'consult)\12(require 'marginalia)\12(require 'orderless)\12\12(vertico-mode 1)\12(marginalia-mode 1)\12\12(setq completion-styles '(orderless basic)\12      completion-category-defaults nil\12      completion-category-overrides '((file (styles partial-completion))))\12\12;; Enhanced keybindings - only if functions exist\12(when (fboundp 'consult-M-x)\12  (global-set-key (kbd \"M-x\") 'consult-M-x))\12\12(when (fboundp 'consult-buffer)\12  (global-set-key (kbd \"C-x b\") 'consult-buffer))\12\12(when (fboundp 'consult-recent-file)\12  (global-set-key (kbd \"C-x C-r\") 'consult-recent-file))\12\12(when (fboundp 'consult-line)\12  (global-set-key (kbd \"C-s\") 'consult-line))\12\12;; Fallback keybindings if consult isn't available\12(unless (fboundp 'consult-recent-file)\12  (global-set-key (kbd \"C-x C-r\") 'recentf-open-files))\12\12(unless (fboundp 'consult-buffer)\12  (global-set-key (kbd \"C-x b\") 'switch-to-buffer))\12\12;; Dark company completion menu\12(with-eval-after-load 'company\12  (set-face-background 'company-tooltip \"#1e1e1e\")\12  (set-face-foreground 'company-tooltip \"#d4d4d4\")\12  (set-face-background 'company-tooltip-selection \"#264f78\")\12  (set-face-foreground 'company-tooltip-selection \"#ffffff\"))\12\12;; Install and configure ripgrep package for proper interactive search\12(unless (package-installed-p 'rg)\12  (package-install 'rg))\12\12(require 'rg)\12\12;; Configure rg package\12(setq rg-executable \"rg\")\12(setq rg-group-result t)\12(setq rg-hide-command t)\12(setq rg-show-columns nil)\12(setq rg-align-position-numbers t)\12(setq rg-align-line-number-field-length 3)\12(setq rg-align-column-number-field-length 3)\12\12;; Project-aware ripgrep function using the rg package\12(defun my-ripgrep-project (pattern)\12  \"Search in project using rg package - interactive results with jump capability.\"\12  (interactive (list (read-string \"Ripgrep project search: \")))\12  (let ((project-root (or (and (fboundp 'projectile-project-root)\12                               (projectile-project-root))\12                          ;; Fallback: look for common project markers\12                          (locate-dominating-file default-directory \".git\")\12                          (locate-dominating-file default-directory \"go.mod\")\12                          (locate-dominating-file default-directory \"CMakeLists.txt\")\12                          (locate-dominating-file default-directory \"Cargo.toml\")\12                          (locate-dominating-file default-directory \"package.json\")\12                          default-directory)))\12    (let ((default-directory project-root))\12      (rg pattern \"*\" project-root))\12    ;; Focus the rg results window\12    (run-with-timer 0.1 nil\12                    (lambda ()\12                      (let ((rg-window (get-buffer-window \"*rg*\")))\12                        (when rg-window\12                          (select-window rg-window)\12                          (goto-char (point-min))\12                          ;; Move to first result\12                          (when (re-search-forward \"^[0-9]+:\" nil t)\12                            (beginning-of-line))))))))\12\12;; Current directory ripgrep function\12(defun my-ripgrep-current-dir (pattern)\12  \"Search in current directory using rg package - interactive results.\"\12  (interactive (list (read-string \"Ripgrep current dir search: \")))\12  (rg pattern \"*\" default-directory)\12  ;; Focus the rg results window\12  (run-with-timer 0.1 nil\12                  (lambda ()\12                    (let ((rg-window (get-buffer-window \"*rg*\")))\12                      (when rg-window\12                        (select-window rg-window)\12                        (goto-char (point-min))\12                        ;; Move to first result\12                        (when (re-search-forward \"^[0-9]+:\" nil t)\12                          (beginning-of-line)))))))\12\12;; Ripgrep keybindings - now using proper rg package\12(global-set-key (kbd \"C-c r\") 'my-ripgrep-project)           ; C-c r = ripgrep project with jump capability\12(global-set-key (kbd \"C-c R\") 'my-ripgrep-current-dir)      ; C-c R = ripgrep current directory\12(global-set-key (kbd \"C-c g\") 'rg-menu)                     ; C-c g = ripgrep menu for advanced options\12\12;; Debug: Show what's actually bound\12(message \"C-x C-r bound to: %s\" (key-binding (kbd \"C-x C-r\")))\12(message \"C-x b bound to: %s\" (key-binding (kbd \"C-x b\")))\12\12;; Company for completions (must be before eglot)\12(unless (package-installed-p 'company)\12  (package-install 'company))\12\12(require 'company)\12(global-company-mode 1)\12(setq company-idle-delay 0.1)\12(setq company-minimum-prefix-length 1)\12\12;; Eglot for LSP\12(require 'eglot)\12(add-to-list 'eglot-server-programs '(c-mode . (\"clangd\")))\12(add-hook 'c-mode-hook 'eglot-ensure)\12")) 1] #8# 0] nil nil 0] org-element--cache-compare)) ((version "2.3")))