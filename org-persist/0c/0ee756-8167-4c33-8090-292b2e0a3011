;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #2=(headline (:standard-properties [134 134 155 5841 5841 0 #1=(:title) nil element t nil 157 5839 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 5841 5841 0 nil org-data nil t nil 3 5841 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/auto-focus.org" :CATEGORY "auto-focus"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 19) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [[nil nil #9=(headline (:standard-properties [1970 1970 1997 3750 3750 0 #1# nil element t nil 1999 3748 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 26) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil nil #13=(headline (:standard-properties [4737 4737 4746 5841 5841 0 #1# nil element t nil 4748 5839 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #12=(headline (:standard-properties [3750 3750 3783 4737 4737 0 #1# nil element t nil 3785 4735 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 32) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [155 155 185 1970 1970 0 #1# section element t nil 187 1968 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 28 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 134 134 0 nil first-section element t nil 1 134 nil nil nil nil #6#]))] :key "TITLE" :value "Auto Focus Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [44 44 nil nil 113 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Automatic window focusing and universal quit behavior")) 0] [nil nil #2# 0] (keyword (:standard-properties [113 113 nil nil 134 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [28 28 nil nil 44 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil #10=(section (:standard-properties [185 185 185 1970 1970 0 nil section element t nil 185 1970 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [185 185 nil nil 1970 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Auto-switch to new windows containing lists or special buffers\12(defun auto-focus-new-window (buffer &optional window)\12  \"Automatically focus new windows with buffer lists or special content.\"\12  (when buffer\12    (let ((buffer-name (buffer-name buffer)))\12      ;; Check if it's a list/special buffer we want to auto-focus\12      (when (or (string-match-p \"\\\\*.*\\\\*\" buffer-name)          ; Any *buffer*\12                (string-match-p \"list\\\\|List\" buffer-name)       ; Any list buffer\12                (string-match-p \"completion\\\\|Completion\" buffer-name) ; Completion buffers\12                (string-match-p \"helm\\\\|vertico\\\\|ivy\" buffer-name)    ; Completion frameworks\12                (string-match-p \"projectile\\\\|project\" buffer-name)    ; Project buffers\12                (string-match-p \"grep\\\\|search\\\\|find\" buffer-name)    ; Search results\12                (string-match-p \"compilation\\\\|compile\" buffer-name)   ; Build output\12                (string-match-p \"magit\\\\|git\" buffer-name)             ; Git buffers\12                (string-match-p \"help\\\\|apropos\\\\|describe\" buffer-name)) ; Help buffers\12        (let ((target-window (or window (get-buffer-window buffer))))\12          (when target-window\12            (select-window target-window)\12            (message \"Auto-focused on: %s\" buffer-name)))))))\12\12;; Hook into window configuration change to auto-focus new windows\12(defun auto-focus-on-window-change ()\12  \"Auto-focus new windows after window configuration changes.\"\12  (when (and (window-live-p (selected-window))\12             (buffer-live-p (window-buffer (selected-window))))\12    (auto-focus-new-window (window-buffer (selected-window)) (selected-window))))\12\12(add-hook 'window-configuration-change-hook 'auto-focus-on-window-change)\12")) 0] [[[nil nil (src-block (:standard-properties [1997 1997 nil nil 3750 1 nil planning element t nil nil nil nil nil nil nil #16=(section (:standard-properties [1997 1997 1997 3750 3750 0 nil section element t nil 1997 3750 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Universal 'q' quit function for all special buffers\12(defun universal-quit-window ()\12  \"Quit current window/buffer intelligently.\"\12  (interactive)\12  (cond\12   ;; If it's a temporary/special buffer, kill it and close window\12   ((or (string-match-p \"\\\\*.*\\\\*\" (buffer-name))\12        (eq major-mode 'help-mode)\12        (eq major-mode 'compilation-mode)\12        (eq major-mode 'grep-mode)\12        (eq major-mode 'occur-mode)\12        (eq major-mode 'apropos-mode)\12        (eq major-mode 'package-menu-mode))\12    (quit-window t))  ; Kill buffer and close window\12\12   ;; If it's a regular file buffer in a split window, just close window\12   ((> (length (window-list)) 1)\12    (delete-window))\12\12   ;; Last window with regular buffer - bury it\12   (t\12    (bury-buffer))))\12\12;; Apply universal 'q' to all special modes\12(defun setup-universal-quit ()\12  \"Set up universal 'q' quit behavior for current buffer.\"\12  (local-set-key (kbd \"q\") 'universal-quit-window))\12\12;; Add to various mode hooks\12(add-hook 'help-mode-hook 'setup-universal-quit)\12(add-hook 'compilation-mode-hook 'setup-universal-quit)\12(add-hook 'occur-mode-hook 'setup-universal-quit)\12(add-hook 'grep-mode-hook 'setup-universal-quit)\12(add-hook 'apropos-mode-hook 'setup-universal-quit)\12(add-hook 'package-menu-mode-hook 'setup-universal-quit)\12(add-hook 'magit-mode-hook 'setup-universal-quit)\12(add-hook 'special-mode-hook 'setup-universal-quit)\12\12;; Also set up for custom test result buffers\12(defun setup-quit-for-test-buffers ()\12  \"Set up 'q' to quit for our custom test result buffers.\"\12  (when (string-match-p \"\\\\*.*Test.*\\\\*\" (buffer-name))\12    (local-set-key (kbd \"q\") 'universal-quit-window)))\12\12(add-hook 'after-change-major-mode-hook 'setup-quit-for-test-buffers)\12")) 0] [nil nil #15=(section (:standard-properties [3783 3783 3783 4737 4737 0 nil section element t nil 3783 4737 nil nil nil nil #12#])) 0] #12# 0] [[nil nil #13# 0] [nil nil (src-block (:standard-properties [4746 4746 nil nil 5841 0 nil planning element t nil nil nil nil nil nil nil #14=(section (:standard-properties [4746 4746 4746 5841 5841 0 nil section element t nil 4746 5841 nil nil nil nil #13#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-auto-focus-module ()\12  \"Test auto focus module functionality.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test function definitions\12    (dolist (func '(universal-quit-window auto-focus-new-window my-enhanced-buffer-list))\12      (if (fboundp func)\12          (push (format \"%s: DEFINED\" func) results)\12        (push (format \"%s: MISSING\" func) results)))\12\12    ;; Test key bindings\12    (let ((buffer-list-binding (key-binding (kbd \"C-x C-b\"))))\12      (push (format \"C-x C-b -> %s\" buffer-list-binding) results))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Auto Focus Test*\")\12      (erase-buffer)\12      (insert \"=== Auto Focus Module Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (local-set-key (kbd \"q\") 'universal-quit-window)  ; Test 'q' behavior here\12      (goto-char (point-min))\12      (display-buffer (current-buffer))\12      (select-window (get-buffer-window (current-buffer))))\12\12    (message \"Auto focus test completed - try pressing 'q' in the test buffer\")))\12")) 0] #14# 0] (src-block (:standard-properties [3783 3783 nil nil 4737 1 nil planning element t nil nil nil nil nil nil nil #15#] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Enhanced buffer list that auto-focuses and has 'q' to quit\12(defun my-enhanced-buffer-list ()\12  \"Show buffer list and automatically switch to it.\"\12  (interactive)\12  (let ((buffer-list-buffer (list-buffers-noselect)))\12    (switch-to-buffer-other-window buffer-list-buffer)\12    (select-window (get-buffer-window buffer-list-buffer))\12    ;; Set up 'q' to quit in buffer list\12    (local-set-key (kbd \"q\") 'universal-quit-window)\12    (message \"Buffer list opened - press 'q' to close\")))\12\12(global-set-key (kbd \"C-x C-b\") 'my-enhanced-buffer-list)\12\12;; Auto-focus behavior for common Emacs commands\12(advice-add 'list-buffers :after\12            (lambda (&rest args)\12              (when (get-buffer \"*Buffer List*\")\12                (switch-to-buffer \"*Buffer List*\"))))\12\12(advice-add 'apropos :after\12            (lambda (&rest args)\12              (when (get-buffer \"*Apropos*\")\12                (switch-to-buffer \"*Apropos*\"))))\12")) 0] #16# 1] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))