;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[nil nil #2=(headline (:standard-properties [121 121 148 11526 11526 0 #1=(:title) nil element t nil 150 11524 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 11526 11526 0 nil org-data nil t nil 3 11526 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/language-support.org" :CATEGORY "language-support"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 25) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil nil #9=(headline (:standard-properties [748 748 768 5989 5989 0 #1# nil element t nil 770 5987 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 19) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [148 148 165 748 748 0 #1# section element t nil 167 746 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil [nil nil #16=(headline (:standard-properties [10641 10641 10650 11526 11526 0 #1# nil element t nil 10652 11524 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #14=(headline (:standard-properties [6659 6659 6690 10641 10641 0 #1# nil element t nil 6692 10639 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 30) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #12=(headline (:standard-properties [5989 5989 6013 6659 6659 0 #1# nil element t nil 6015 6657 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 23) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 34 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 121 121 0 nil first-section element t nil 1 121 nil nil nil nil #6#]))] :key "TITLE" :value "Language Support Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [50 50 nil nil 100 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Multi-language development support")) 0] [nil nil #2# 0] (keyword (:standard-properties [100 100 nil nil 121 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [34 34 nil nil 50 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[[nil nil #10=(section (:standard-properties [165 165 165 748 748 0 nil section element t nil 165 748 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [165 165 nil nil 748 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; C-specific settings\12(add-hook 'c-mode-hook\12          (lambda ()\12            (setq c-default-style \"k&r\")\12            (setq c-basic-offset 2)))\12\12;; Simple C build function\12(defun build-c-file ()\12  \"Build current C file.\"\12  (interactive)\12  (when (eq major-mode 'c-mode)\12    (let ((current-file (buffer-file-name)))\12      (when current-file\12        (compile (format \"clang -std=c11 -o %s %s\"\12                        (file-name-sans-extension (file-name-nondirectory current-file))\12                        (file-name-nondirectory current-file)))))))\12")) 0] [[nil nil (src-block (:standard-properties [768 768 nil nil 5989 1 nil planning element t nil nil nil nil nil nil nil #13=(section (:standard-properties [768 768 768 5989 5989 0 nil section element t nil 768 5989 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Download odin-mode if needed\12(let ((odin-mode-dir (expand-file-name \"odin-mode\" user-emacs-directory))\12      (odin-mode-file (expand-file-name \"odin-mode/odin-mode.el\" user-emacs-directory)))\12  (unless (file-exists-p odin-mode-file)\12    (make-directory odin-mode-dir t)\12    (url-copy-file \"https://raw.githubusercontent.com/mattt-b/odin-mode/master/odin-mode.el\"\12                   odin-mode-file t))\12  (load-file odin-mode-file)\12  (require 'odin-mode))\12\12;; Configure file associations for Odin\12(add-to-list 'auto-mode-alist '(\"\\\\.odin\\\\'\" . odin-mode))\12\12;; Force mode detection for recently opened files\12(defun force-mode-detection ()\12  \"Force proper major mode detection for current buffer.\"\12  (interactive)\12  (when (buffer-file-name)\12    (let ((filename (buffer-file-name)))\12      (cond\12       ;; Odin files\12       ((string-match \"\\\\.odin\\\\'\" filename)\12        (odin-mode)\12        (message \"Applied odin-mode to %s\" (file-name-nondirectory filename)))\12       ;; C files\12       ((string-match \"\\\\.\\\\(c\\\\|h\\\\)\\\\'\" filename)\12        (c-mode)\12        (message \"Applied c-mode to %s\" (file-name-nondirectory filename)))\12       ;; Go files\12       ((string-match \"\\\\.go\\\\'\" filename)\12        (go-mode)\12        (message \"Applied go-mode to %s\" (file-name-nondirectory filename)))\12       ;; Markdown files\12       ((string-match \"\\\\.\\\\(md\\\\|markdown\\\\)\\\\'\" filename)\12        (markdown-mode)\12        (message \"Applied markdown-mode to %s\" (file-name-nondirectory filename)))\12       ;; CMake files\12       ((string-match \"CMakeLists\\\\.txt\\\\'\" filename)\12        (cmake-mode)\12        (message \"Applied cmake-mode to %s\" (file-name-nondirectory filename)))\12       ((string-match \"\\\\.cmake\\\\'\" filename)\12        (cmake-mode)\12        (message \"Applied cmake-mode to %s\" (file-name-nondirectory filename)))\12       ;; Makefiles\12       ((string-match \"[Mm]akefile\\\\'\" filename)\12        (makefile-mode)\12        (message \"Applied makefile-mode to %s\" (file-name-nondirectory filename)))\12       (t\12        (set-auto-mode)\12        (message \"Applied auto-mode to %s\" (file-name-nondirectory filename)))))))\12\12;; Hook to ensure mode is applied when files are opened\12(add-hook 'find-file-hook\12          (lambda ()\12            (when (and (buffer-file-name)\12                       (eq major-mode 'fundamental-mode)) ; File didn't get proper mode\12              (force-mode-detection))))\12\12;; Global key to manually fix mode\12(global-set-key (kbd \"C-c m\") 'force-mode-detection)\12\12;; CMake support\12(unless (package-installed-p 'cmake-mode)\12  (package-install 'cmake-mode))\12\12(when (package-installed-p 'cmake-mode)\12  (require 'cmake-mode)\12  ;; File associations for CMake\12  (add-to-list 'auto-mode-alist '(\"CMakeLists\\\\.txt\\\\'\" . cmake-mode))\12  (add-to-list 'auto-mode-alist '(\"\\\\.cmake\\\\'\" . cmake-mode))\12\12  ;; Also handle Makefiles\12  (add-to-list 'auto-mode-alist '(\"[Mm]akefile\\\\'\" . makefile-mode))\12  (add-to-list 'auto-mode-alist '(\"\\\\.mk\\\\'\" . makefile-mode))\12\12  (message \"CMake and Makefile syntax highlighting configured\"))\12\12;; Configure ols for Odin (found in your repos!)\12(let ((ols-path \"G:/repos/ols/ols.exe\"))  ; Your actual ols location\12  (when (and ols-path (file-exists-p ols-path))\12    (add-to-list 'eglot-server-programs `(odin-mode . (,ols-path)))\12    (add-hook 'odin-mode-hook 'eglot-ensure)\12    (message \"ols configured at: %s\" ols-path))\12  (unless (and ols-path (file-exists-p ols-path))\12    (message \"ols not found - install from https://github.com/DanielGavin/ols\")))\12\12;; Debug: Check if odin-mode is available\12(message \"Odin mode available: %s\" (if (fboundp 'odin-mode) \"YES\" \"NO\"))\12\12;; Simple Odin build function\12(defun build-odin-file ()\12  \"Build current Odin file or project.\"\12  (interactive)\12  (when (eq major-mode 'odin-mode)\12    (let* ((project-root default-directory)\12           (odin-files (directory-files project-root nil \"\\\\.odin$\"))\12           (project-name (file-name-nondirectory (directory-file-name project-root))))\12      (if (> (length odin-files) 1)\12          (compile (format \"odin build . -out:%s\" project-name))\12        (let ((current-file (buffer-file-name)))\12          (when current-file\12            (compile (format \"odin build %s -file -out:%s\"\12                            (file-name-nondirectory current-file)\12                            (file-name-sans-extension (file-name-nondirectory current-file))))))))))\12\12;; Simple Odin run function\12(defun run-odin-file ()\12  \"Run current Odin file or project.\"\12  (interactive)\12  (when (eq major-mode 'odin-mode)\12    (let* ((project-root default-directory)\12           (odin-files (directory-files project-root nil \"\\\\.odin$\"))\12           (project-name (file-name-nondirectory (directory-file-name project-root))))\12      (if (> (length odin-files) 1)\12          (async-shell-command (format \"odin run . -out:%s\" project-name) \"*Odin Output*\")\12        (let ((current-file (buffer-file-name)))\12          (when current-file\12            (async-shell-command (format \"odin run %s -file -out:%s\"\12                                        (file-name-nondirectory current-file)\12                                        (file-name-sans-extension (file-name-nondirectory current-file)))\12                                \"*Odin Output*\")))))))\12")) 0] [nil nil #18=(section (:standard-properties [6013 6013 6013 6659 6659 0 nil section element t nil 6013 6659 nil nil nil nil #12#])) 0] #12# 0] #13# 0] [[[nil nil #14# 0] [nil nil (src-block (:standard-properties [6690 6690 nil nil 10641 1 nil planning element t nil nil nil nil nil nil nil #15=(section (:standard-properties [6690 6690 6690 10641 10641 0 nil section element t nil 6690 10641 nil nil nil nil #14#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; GDB Debugging Configuration for Windows\12;; Configure GDB for Windows with MinGW/MSYS2\12\12;; GDB configuration\12(setq gdb-many-windows t)                    ; Enable multiple debugging windows\12(setq gdb-show-main t)                       ; Show main source window\12(setq gud-gdb-command-name \"gdb -i=mi\")      ; Use GDB machine interface\12\12;; Windows-specific GDB setup\12(when (eq system-type 'windows-nt)\12  ;; Try different GDB locations on Windows\12  (let ((gdb-locations '(\"gdb\"\12                          \"C:/msys64/mingw64/bin/gdb.exe\"\12                          \"C:/mingw64/bin/gdb.exe\"\12                          \"C:/Program Files/MinGW-w64/mingw64/bin/gdb.exe\")))\12    (dolist (gdb-path gdb-locations)\12      (when (executable-find gdb-path)\12        (setq gud-gdb-command-name (concat gdb-path \" -i=mi\"))\12        (message \"Found GDB at: %s\" gdb-path)\12        (return)))))\12\12;; Enhanced debugging functions for C projects\12(defun debug-c-program ()\12  \"Debug current C program with GDB in Emacs.\"\12  (interactive)\12  (let* ((current-file (buffer-file-name))\12         (exe-name (if current-file\12                       (file-name-sans-extension (file-name-nondirectory current-file))\12                     \"a\")))\12    (if (file-exists-p (concat exe-name \".exe\"))\12        (gdb (concat gud-gdb-command-name \" \" exe-name \".exe\"))\12      (if (file-exists-p exe-name)\12          (gdb (concat gud-gdb-command-name \" \" exe-name))\12        (message \"No executable found. Build first with F3.\")))))\12\12(defun build-rift-debug ()\12  \"Build rift project in Debug configuration.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/rift/\"))\12    (compile \"cmake --build build --config Debug\")))\12\12(defun debug-rift-project ()\12  \"Debug rift project with GDB using Debug build.\"\12  (interactive)\12  (let* ((default-directory \"G:/repos/rift/\")\12         (debug-exe-path \"build/Debug/rift.exe\")\12         (release-exe-path \"build/Release/rift.exe\"))\12    (cond\12     ((file-exists-p debug-exe-path)\12      (gdb (concat gud-gdb-command-name \" \" debug-exe-path)))\12     ((file-exists-p release-exe-path)\12      (message \"Using Release build (no debug symbols). Run: cmake --build build --config Debug\")\12      (gdb (concat gud-gdb-command-name \" \" release-exe-path)))\12     (t\12      (message \"No rift executable found. Build first with: cmake --build build --config Debug\")))))\12\12;; Quick debugging commands\12(defun gdb-set-breakpoint-here ()\12  \"Set GDB breakpoint at current line.\"\12  (interactive)\12  (if (bound-and-true-p gud-minor-mode)\12      (gud-break 1)\12    (message \"Not in a GDB session. Start debugging first.\")))\12\12(defun gdb-step-over ()\12  \"GDB step over (next line).\"\12  (interactive)\12  (if (bound-and-true-p gud-minor-mode)\12      (gud-next 1)\12    (message \"Not in a GDB session. Start debugging first.\")))\12\12(defun gdb-step-into ()\12  \"GDB step into function.\"\12  (interactive)\12  (if (bound-and-true-p gud-minor-mode)\12      (gud-step 1)\12    (message \"Not in a GDB session. Start debugging first.\")))\12\12(defun gdb-continue ()\12  \"GDB continue execution.\"\12  (interactive)\12  (if (bound-and-true-p gud-minor-mode)\12      (gud-cont 1)\12    (message \"Not in a GDB session. Start debugging first.\")))\12\12;; Debugging keybindings\12(global-set-key (kbd \"C-c d d\") 'debug-c-program)       ; Debug current C program\12(global-set-key (kbd \"C-c d r\") 'debug-rift-project)    ; Debug rift project\12(global-set-key (kbd \"C-c d D\") 'build-rift-debug)      ; Build debug version\12(global-set-key (kbd \"C-c d b\") 'gdb-set-breakpoint-here) ; Set breakpoint\12(global-set-key (kbd \"C-c d n\") 'gdb-step-over)         ; Step over (next)\12(global-set-key (kbd \"C-c d s\") 'gdb-step-into)         ; Step into\12(global-set-key (kbd \"C-c d c\") 'gdb-continue)          ; Continue\12(global-set-key (kbd \"C-c d g\") 'gdb)                   ; Start GDB manually\12\12;; F5 for quick debugging (alternative to RemedyBG)\12(global-set-key [f5] 'debug-rift-project)\12\12(message \"GDB debugging configured for Windows\")\12")) 0] #15# 0] [nil [nil nil (src-block (:standard-properties [10650 10650 nil nil 11526 0 nil planning element t nil nil nil nil nil nil nil #17=(section (:standard-properties [10650 10650 10650 11526 11526 0 nil section element t nil 10650 11526 nil nil nil nil #16#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-language-support-module ()\12  \"Test language support module.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test function definitions\12    (dolist (func '(build-odin-file run-odin-file universal-build universal-run))\12      (if (fboundp func)\12          (push (format \"%s: DEFINED\" func) results)\12        (push (format \"%s: MISSING\" func) results)))\12\12    ;; Test modes\12    (if (fboundp 'odin-mode)\12        (push \"odin-mode: AVAILABLE\" results)\12      (push \"odin-mode: MISSING\" results))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Language Support Test*\")\12      (erase-buffer)\12      (insert \"=== Language Support Module Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (display-buffer (current-buffer)))\12\12    (message \"Language support test completed\")))\12")) 0] #17# 1] #16# 0] (src-block (:standard-properties [6013 6013 nil nil 6659 1 nil planning element t nil nil nil nil nil nil nil #18#] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Universal build function that detects language\12(defun universal-build ()\12  \"Build current file/project based on language mode.\"\12  (interactive)\12  (cond\12   ((eq major-mode 'odin-mode) (build-odin-file))\12   ((eq major-mode 'c-mode) (build-c-file))\12   (t (message \"No build method for mode: %s\" major-mode))))\12\12(defun universal-run ()\12  \"Run current file/project based on language mode.\"\12  (interactive)\12  (cond\12   ((eq major-mode 'odin-mode) (run-odin-file))\12   (t (message \"No run method for mode: %s\" major-mode))))\12\12;; Key bindings\12(global-set-key [f3] 'universal-build)\12(global-set-key [f4] 'universal-run)\12")) 0] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))