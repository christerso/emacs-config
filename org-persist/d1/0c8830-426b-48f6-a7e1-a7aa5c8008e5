;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #2=(headline (:standard-properties [121 121 148 9629 9629 0 #1=(:title) nil element t nil 150 9627 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 9629 9629 0 nil org-data nil t nil 3 9629 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/language-support.org" :CATEGORY "language-support"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 25) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [[nil nil #9=(headline (:standard-properties [3567 3567 3591 4529 4529 0 #1# nil element t nil 3593 4527 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 23) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil nil #13=(headline (:standard-properties [8744 8744 8753 9629 9629 0 #1# nil element t nil 8755 9627 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #12=(headline (:standard-properties [4529 4529 4560 8744 8744 0 #1# nil element t nil 4562 8742 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 30) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #8=(headline (:standard-properties [148 148 176 3567 3567 0 #1# section element t nil 178 3565 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 27) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 34 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 121 121 0 nil first-section element t nil 1 121 nil nil nil nil #6#]))] :key "TITLE" :value "Language Support Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [50 50 nil nil 100 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Multi-language development support")) 0] [nil nil #2# 0] (keyword (:standard-properties [100 100 nil nil 121 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [34 34 nil nil 50 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil #10=(section (:standard-properties [176 176 176 3567 3567 0 nil section element t nil 176 3567 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [176 176 nil nil 3567 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Force mode detection for recently opened files\12(defun force-mode-detection ()\12  \"Force proper major mode detection for current buffer.\"\12  (interactive)\12  (when (buffer-file-name)\12    (let ((filename (buffer-file-name)))\12      (cond\12       ;; Odin files\12       ((string-match \"\\\\.odin\\\\'\" filename)\12        (when (fboundp 'odin-mode)\12          (odin-mode)\12          (message \"Applied odin-mode to %s\" (file-name-nondirectory filename))))\12       ;; C files\12       ((string-match \"\\\\.\\\\(c\\\\|h\\\\)\\\\'\" filename)\12        (c-mode)\12        (message \"Applied c-mode to %s\" (file-name-nondirectory filename)))\12       ;; Go files\12       ((string-match \"\\\\.go\\\\'\" filename)\12        (when (fboundp 'go-mode)\12          (go-mode)\12          (message \"Applied go-mode to %s\" (file-name-nondirectory filename))))\12       ;; Markdown files\12       ((string-match \"\\\\.\\\\(md\\\\|markdown\\\\)\\\\'\" filename)\12        (when (fboundp 'markdown-mode)\12          (markdown-mode)\12          (message \"Applied markdown-mode to %s\" (file-name-nondirectory filename))))\12       ;; CMake files\12       ((string-match \"CMakeLists\\\\.txt\\\\'\" filename)\12        (when (fboundp 'cmake-mode)\12          (cmake-mode)\12          (message \"Applied cmake-mode to %s\" (file-name-nondirectory filename))))\12       ((string-match \"\\\\.cmake\\\\'\" filename)\12        (when (fboundp 'cmake-mode)\12          (cmake-mode)\12          (message \"Applied cmake-mode to %s\" (file-name-nondirectory filename))))\12       ;; Makefiles\12       ((string-match \"[Mm]akefile\\\\'\" filename)\12        (makefile-mode)\12        (message \"Applied makefile-mode to %s\" (file-name-nondirectory filename)))\12       (t\12        (set-auto-mode)\12        (message \"Applied auto-mode to %s\" (file-name-nondirectory filename)))))))\12\12;; Hook to ensure mode is applied when files are opened\12(add-hook 'find-file-hook\12          (lambda ()\12            (when (and (buffer-file-name)\12                       (eq major-mode 'fundamental-mode)) ; File didn't get proper mode\12              (force-mode-detection))))\12\12;; Global key to manually fix mode\12(global-set-key (kbd \"C-c m\") 'force-mode-detection)\12\12;; Optional language modes - install if available but don't fail if missing\12(when (not (package-installed-p 'go-mode))\12  (condition-case err\12      (package-install 'go-mode)\12    (error\12     (message \"Could not install go-mode: %s\" (error-message-string err)))))\12\12(when (not (package-installed-p 'markdown-mode))\12  (condition-case err\12      (package-install 'markdown-mode)\12    (error\12     (message \"Could not install markdown-mode: %s\" (error-message-string err)))))\12\12;; CMake support\12(condition-case err\12    (progn\12      (unless (package-installed-p 'cmake-mode)\12        (package-install 'cmake-mode))\12      (require 'cmake-mode)\12      ;; File associations for CMake\12      (add-to-list 'auto-mode-alist '(\"CMakeLists\\\\.txt\\\\'\" . cmake-mode))\12      (add-to-list 'auto-mode-alist '(\"\\\\.cmake\\\\'\" . cmake-mode))\12\12      ;; Also handle Makefiles\12      (add-to-list 'auto-mode-alist '(\"[Mm]akefile\\\\'\" . makefile-mode))\12      (add-to-list 'auto-mode-alist '(\"\\\\.mk\\\\'\" . makefile-mode))\12\12      (message \"CMake and Makefile syntax highlighting configured\"))\12  (error\12   (message \"Could not configure CMake support: %s\" (error-message-string err))))\12\12;; Debug: Check if odin-mode is available\12(message \"Odin mode available: %s\" (if (fboundp 'odin-mode) \"YES\" \"NO\"))\12\12")) 0] [[[nil nil (src-block (:standard-properties [3591 3591 nil nil 4529 1 nil planning element t nil nil nil nil nil nil nil #16=(section (:standard-properties [3591 3591 3591 4529 4529 0 nil section element t nil 3591 4529 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Universal build function that detects language\12(defun universal-build ()\12  \"Build current file/project based on language mode.\"\12  (interactive)\12  (cond\12   ((eq major-mode 'odin-mode) (when (fboundp 'build-odin-file) (build-odin-file)))\12   ((eq major-mode 'c-mode) (when (fboundp 'build-c-file) (build-c-file)))\12   ((eq major-mode 'c++-mode) (when (fboundp 'build-cpp-file) (build-cpp-file)))\12   (t (message \"No build method for mode: %s\" major-mode))))\12\12(defun universal-run ()\12  \"Run current file/project based on language mode.\"\12  (interactive)\12  (cond\12   ((eq major-mode 'odin-mode) (when (fboundp 'run-odin-file) (run-odin-file)))\12   ((eq major-mode 'c++-mode) (when (fboundp 'run-cpp-file) (run-cpp-file)))\12   (t (message \"No run method for mode: %s\" major-mode))))\12\12;; Key bindings\12(global-set-key [f3] 'universal-build)\12;; Note: F4 is handled by project-builds module for smart project running\12")) 0] [nil nil #15=(section (:standard-properties [4560 4560 4560 8744 8744 0 nil section element t nil 4560 8744 nil nil nil nil #12#])) 0] #12# 0] [[nil nil #13# 0] [nil nil (src-block (:standard-properties [8753 8753 nil nil 9629 0 nil planning element t nil nil nil nil nil nil nil #14=(section (:standard-properties [8753 8753 8753 9629 9629 0 nil section element t nil 8753 9629 nil nil nil nil #13#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-language-support-module ()\12  \"Test language support module.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test function definitions\12    (dolist (func '(build-odin-file run-odin-file universal-build universal-run))\12      (if (fboundp func)\12          (push (format \"%s: DEFINED\" func) results)\12        (push (format \"%s: MISSING\" func) results)))\12\12    ;; Test modes\12    (if (fboundp 'odin-mode)\12        (push \"odin-mode: AVAILABLE\" results)\12      (push \"odin-mode: MISSING\" results))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Language Support Test*\")\12      (erase-buffer)\12      (insert \"=== Language Support Module Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (display-buffer (current-buffer)))\12\12    (message \"Language support test completed\")))\12")) 0] #14# 0] (src-block (:standard-properties [4560 4560 nil nil 8744 1 nil planning element t nil nil nil nil nil nil nil #15#] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; GDB Debugging Configuration for Windows\12;; Configure GDB for Windows with MinGW/MSYS2\12\12;; GDB configuration\12(setq gdb-many-windows t)                    ; Enable multiple debugging windows\12(setq gdb-show-main t)                       ; Show main source window\12(setq gud-gdb-command-name \"gdb -i=mi\")      ; Use GDB machine interface\12\12;; Windows-specific GDB setup\12(when (eq system-type 'windows-nt)\12  ;; Try different GDB locations on Windows\12  (let ((gdb-locations '(\"gdb\"\12                          \"C:/msys64/mingw64/bin/gdb.exe\"\12                          \"C:/mingw64/bin/gdb.exe\"\12                          \"C:/Program Files/MinGW-w64/mingw64/bin/gdb.exe\"))\12        (gdb-found nil))\12    (dolist (gdb-path gdb-locations)\12      (when (and (not gdb-found) (executable-find gdb-path))\12        (setq gud-gdb-command-name (concat gdb-path \" -i=mi\"))\12        (message \"Found GDB at: %s\" gdb-path)\12        (setq gdb-found t)))))\12\12;; Enhanced debugging functions for C projects\12(defun debug-c-program ()\12  \"Debug current C program with GDB in Emacs.\"\12  (interactive)\12  (let* ((current-file (buffer-file-name))\12         (exe-name (if current-file\12                       (file-name-sans-extension (file-name-nondirectory current-file))\12                     \"a\")))\12    (if (file-exists-p (concat exe-name \".exe\"))\12        (gdb (concat gud-gdb-command-name \" \" exe-name \".exe\"))\12      (if (file-exists-p exe-name)\12          (gdb (concat gud-gdb-command-name \" \" exe-name))\12        (message \"No executable found. Build first with F3.\")))))\12\12(defun build-rift-debug ()\12  \"Build rift project in Debug configuration.\"\12  (interactive)\12  (let ((default-directory \"G:/repos/rift/\"))\12    (compile \"cmake --build build --config Debug\")))\12\12(defun debug-rift-project ()\12  \"Debug rift project with GDB using Debug build.\"\12  (interactive)\12  (let* ((default-directory \"G:/repos/rift/\")\12         (debug-exe-path \"build/Debug/rift.exe\")\12         (release-exe-path \"build/Release/rift.exe\"))\12    (cond\12     ((file-exists-p debug-exe-path)\12      (gdb (concat gud-gdb-command-name \" \" debug-exe-path)))\12     ((file-exists-p release-exe-path)\12      (message \"Using Release build (no debug symbols). Run: cmake --build build --config Debug\")\12      (gdb (concat gud-gdb-command-name \" \" release-exe-path)))\12     (t\12      (message \"No rift executable found. Build first with: cmake --build build --config Debug\")))))\12\12;; Quick debugging commands\12(defun gdb-set-breakpoint-here ()\12  \"Set GDB breakpoint at current line.\"\12  (interactive)\12  (if (bound-and-true-p gud-minor-mode)\12      (gud-break 1)\12    (message \"Not in a GDB session. Start debugging first.\")))\12\12(defun gdb-step-over ()\12  \"GDB step over (next line).\"\12  (interactive)\12  (if (bound-and-true-p gud-minor-mode)\12      (gud-next 1)\12    (message \"Not in a GDB session. Start debugging first.\")))\12\12(defun gdb-step-into ()\12  \"GDB step into function.\"\12  (interactive)\12  (if (bound-and-true-p gud-minor-mode)\12      (gud-step 1)\12    (message \"Not in a GDB session. Start debugging first.\")))\12\12(defun gdb-continue ()\12  \"GDB continue execution.\"\12  (interactive)\12  (if (bound-and-true-p gud-minor-mode)\12      (gud-cont 1)\12    (message \"Not in a GDB session. Start debugging first.\")))\12\12;; Debugging keybindings - create prefix keymap first\12(defvar debug-keymap (make-sparse-keymap)\12  \"Keymap for debugging commands.\")\12\12(define-key debug-keymap (kbd \"d\") 'debug-c-program)       ; Debug current C program\12(define-key debug-keymap (kbd \"r\") 'debug-rift-project)    ; Debug rift project\12(define-key debug-keymap (kbd \"D\") 'build-rift-debug)      ; Build debug version\12(define-key debug-keymap (kbd \"b\") 'gdb-set-breakpoint-here) ; Set breakpoint\12(define-key debug-keymap (kbd \"n\") 'gdb-step-over)         ; Step over (next)\12(define-key debug-keymap (kbd \"s\") 'gdb-step-into)         ; Step into\12(define-key debug-keymap (kbd \"c\") 'gdb-continue)          ; Continue\12(define-key debug-keymap (kbd \"g\") 'gdb)                   ; Start GDB manually\12\12(global-set-key (kbd \"C-c d\") debug-keymap)\12\12;; F5 for quick debugging (alternative to RemedyBG)\12(global-set-key [f5] 'debug-rift-project)\12\12(message \"GDB debugging configured for Windows\")\12")) 0] #16# 1] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))