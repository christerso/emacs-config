;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #2=(headline (:standard-properties [119 119 141 8362 8362 0 #1=(:title) nil element t nil 143 8360 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 8362 8362 0 nil org-data nil t nil 3 8362 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/font-system.org" :CATEGORY "font-system"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 20) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil [nil nil #12=(headline (:standard-properties [7302 7302 7311 8362 8362 0 #1# nil element t nil 7313 8360 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #9=(headline (:standard-properties [6424 6424 6449 7302 7302 0 #1# nil element t nil 6451 7300 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #8=(headline (:standard-properties [141 141 168 6424 6424 0 #1# section element t nil 170 6422 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 26) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 29 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 119 119 0 nil first-section element t nil 1 119 nil nil nil nil #6#]))] :key "TITLE" :value "Font System Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [45 45 nil nil 98 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Comprehensive font and Unicode system")) 0] [nil nil #2# 0] (keyword (:standard-properties [98 98 nil nil 119 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [29 29 nil nil 45 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil #10=(section (:standard-properties [168 168 168 6424 6424 0 nil section element t nil 168 6424 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [168 168 nil nil 6424 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defvar my-protected-face-patterns\12  '(\"icon\" \"treemacs\" \"all-the-icons\" \"nerd-icons\" \"dired-directory\"\12    \"magit-diff\" \"git-gutter\" \"flycheck\" \"company-tooltip\" \"lsp-ui\"\12    \"rainbow-delimiters\" \"hl-line\" \"region\" \"isearch\" \"lazy-highlight\"\12    \"show-paren\" \"cursor\" \"fringe\" \"vertical-border\")\12  \"Face name patterns that should not be modified by font enforcement.\")\12\12(defun my-face-should-be-protected-p (face-name)\12  \"Return t if FACE-NAME should be protected from font changes.\"\12  (let ((face-str (symbol-name face-name)))\12    (cl-some (lambda (pattern)\12               (string-match-p pattern face-str))\12             my-protected-face-patterns)))\12\12(defun force-jetbrains-font-selectively ()\12  \"Enforce JetBrains Mono font only on text faces, preserving special symbols.\"\12  ;; Try multiple possible font names for Windows compatibility\12  (let ((jetbrains-fonts '(\"JetBrainsMono Nerd Font\" \"JetBrains Mono\" \"JetBrainsMono-NF\"))\12        (font-set nil))\12    ;; Find the first available JetBrains font\12    (dolist (font jetbrains-fonts)\12      (when (member font (font-family-list))\12        (setq font-set font)\12        (return)))\12\12    (when font-set\12      ;; Core text faces\12      (set-face-attribute 'default nil :family font-set :height 110)\12      (set-face-attribute 'fixed-pitch nil :family font-set :height 110)\12      (set-face-attribute 'variable-pitch nil :family font-set :height 110)\12\12      ;; Programming language faces\12      (dolist (face '(font-lock-comment-face font-lock-string-face font-lock-keyword-face\12                      font-lock-function-name-face font-lock-variable-name-face\12                      font-lock-type-face font-lock-constant-face font-lock-builtin-face))\12        (when (facep face)\12          (set-face-attribute face nil :family \"JetBrainsMono Nerd Font\")))\12\12      (message \"JetBrains Mono font applied selectively\"))))\12\12;; Apply font enforcement aggressively\12(force-jetbrains-font-selectively)\12\12;; Nuclear font enforcement - run immediately and periodically\12(add-hook 'after-init-hook 'force-jetbrains-font-selectively)\12(add-hook 'window-setup-hook 'force-jetbrains-font-selectively)\12(add-hook 'after-make-frame-functions\12          (lambda (frame) (force-jetbrains-font-selectively)))\12\12;; Force fonts every 3 seconds until they stick\12(run-with-idle-timer 3 t 'force-jetbrains-font-selectively)\12\12;; Manual font fix command\12(defun nuclear-font-fix ()\12  \"Aggressively force JetBrains font everywhere while preserving symbol fonts.\"\12  (interactive)\12  (let ((jetbrains-fonts '(\"JetBrainsMono Nerd Font\" \"JetBrains Mono\" \"JetBrainsMono-NF\" \"Consolas\"))\12        (font-set nil)\12        (faces-changed 0))\12\12    ;; Find available font\12    (dolist (font jetbrains-fonts)\12      (when (member font (font-family-list))\12        (setq font-set font)\12        (return)))\12\12    (when font-set\12      ;; Apply to ALL faces EXCEPT symbol/icon faces\12      (dolist (face (face-list))\12        (let ((face-name (symbol-name face)))\12          (unless (or (string-match-p \"all-the-icons\" face-name)\12                      (string-match-p \"nerd-icons\" face-name)\12                      (string-match-p \"treemacs-icons\" face-name)\12                      (string-match-p \"company-icons\" face-name)\12                      (string-match-p \"emoji\" face-name)\12                      (string-match-p \"symbol\" face-name))\12            (when (facep face)\12              (condition-case err\12                  (progn\12                    (set-face-attribute face nil :family font-set)\12                    (setq faces-changed (1+ faces-changed)))\12                (error nil))))))\12\12      ;; Force default font\12      (set-face-attribute 'default nil :family font-set :height 110)\12\12      ;; Set buffer face mode\12      (setq buffer-face-mode-face `(:family ,font-set :height 110))\12      (buffer-face-mode 1)\12\12      ;; Force frame font\12      (when (fboundp 'set-frame-font)\12        (set-frame-font font-set nil t))\12\12      ;; Redraw\12      (redraw-display)\12\12      (message \"NUCLEAR FONT FIX: %s applied to %d faces (preserving symbols)\" font-set faces-changed))))\12\12(global-set-key (kbd \"C-c M-f\") 'nuclear-font-fix)\12\12;; Restore proper programming font everywhere except treemacs icons\12(let ((preferred-font (cond\12                       ((member \"JetBrainsMonoNL NFM\" (font-family-list)) \"JetBrainsMonoNL NFM\")\12                       ((member \"JetBrainsMono Nerd Font\" (font-family-list)) \"JetBrainsMono Nerd Font\")\12                       ((member \"CaskaydiaCove Nerd Font\" (font-family-list)) \"CaskaydiaCove Nerd Font\")\12                       ((member \"Cascadia Code\" (font-family-list)) \"Cascadia Code\")\12                       ((member \"Consolas\" (font-family-list)) \"Consolas\")\12                       (t nil))))\12  (when preferred-font\12    ;; Core fonts\12    (set-face-attribute 'default nil :family preferred-font :height 110)\12    (set-face-attribute 'fixed-pitch nil :family preferred-font :height 110)\12    (set-face-attribute 'variable-pitch nil :family preferred-font :height 110)\12\12    ;; Programming faces\12    (dolist (face '(font-lock-comment-face font-lock-string-face font-lock-keyword-face\12                    font-lock-function-name-face font-lock-variable-name-face\12                    font-lock-type-face font-lock-constant-face font-lock-builtin-face))\12      (when (facep face)\12        (set-face-attribute face nil :family preferred-font)))\12\12    ;; Mode line\12    (set-face-attribute 'mode-line nil :family preferred-font :height 100)\12    (set-face-attribute 'mode-line-inactive nil :family preferred-font :height 100)\12\12    ;; Minibuffer\12    (set-face-attribute 'minibuffer-prompt nil :family preferred-font)\12\12    ;; Company completion\12    (with-eval-after-load 'company\12      (set-face-attribute 'company-tooltip nil :family preferred-font))\12\12    ;; Compilation faces\12    (dolist (face '(compilation-info compilation-error compilation-warning))\12      (when (facep face)\12        (set-face-attribute face nil :family preferred-font)))\12\12    (message \"Font applied: %s (preserving treemacs icons)\" preferred-font))\12\12  ;; DO NOT touch these treemacs/icon faces:\12  ;; - treemacs-* faces (file icons)\12  ;; - all-the-icons-* faces\12  ;; - nerd-icons-* faces\12\12  (message \"JetBrains font restored everywhere (preserving treemacs icons)\"))\12")) 0] [[nil nil (src-block (:standard-properties [6449 6449 nil nil 7302 1 nil planning element t nil nil nil nil nil nil nil #14=(section (:standard-properties [6449 6449 6449 7302 7302 0 nil section element t nil 6449 7302 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Comprehensive Unicode setup\12(when (member \"JetBrainsMono Nerd Font\" (font-family-list))\12  ;; UTF-8 everywhere\12  (set-language-environment \"UTF-8\")\12  (set-default-coding-systems 'utf-8)\12  (set-terminal-coding-system 'utf-8)\12  (set-keyboard-coding-system 'utf-8)\12  (prefer-coding-system 'utf-8)\12\12  ;; Font configuration for Unicode\12  (set-fontset-font t 'unicode \"JetBrainsMono Nerd Font\" nil 'prepend)\12  (set-fontset-font t 'unicode \"Segoe UI Symbol\" nil 'append)\12  (set-fontset-font t 'unicode \"Segoe UI Emoji\" nil 'append)\12\12  ;; Critical symbols\12  (set-fontset-font t ?\\u2192 \"JetBrainsMono Nerd Font\" nil 'prepend) ; →\12  (set-fontset-font t ?\\u2190 \"JetBrainsMono Nerd Font\" nil 'prepend) ; ←\12  (set-fontset-font t ?\\u2022 \"JetBrainsMono Nerd Font\" nil 'prepend) ; •\12\12  (message \"Unicode font system configured\"))\12")) 0] [nil [nil nil (src-block (:standard-properties [7311 7311 nil nil 8362 0 nil planning element t nil nil nil nil nil nil nil #13=(section (:standard-properties [7311 7311 7311 8362 8362 0 nil section element t nil 7311 8362 nil nil nil nil #12#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-font-system-module ()\12  \"Test font system module.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test font availability\12    (if (member \"JetBrainsMono Nerd Font\" (font-family-list))\12        (push \"JetBrains font: AVAILABLE\" results)\12      (push \"JetBrains font: MISSING\" results))\12\12    ;; Test function definitions\12    (dolist (func '(force-jetbrains-font-selectively my-face-should-be-protected-p))\12      (if (fboundp func)\12          (push (format \"%s: DEFINED\" func) results)\12        (push (format \"%s: MISSING\" func) results)))\12\12    ;; Test current font\12    (let ((current-font (face-attribute 'default :family)))\12      (push (format \"Current font: %s\" current-font) results))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Font System Test*\")\12      (erase-buffer)\12      (insert \"=== Font System Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (display-buffer (current-buffer)))\12\12    (message \"Font system test completed\")))\12")) 0] #13# 1] #12# 1] #14# 1] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))