;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #2=(headline (:standard-properties [134 134 158 5585 5585 0 #1=(:title) nil element t nil 160 5583 1 nil nil nil #7=(org-data (:standard-properties [1 1 1 5585 5585 0 nil org-data nil t nil 3 5585 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/module-loader.org" :CATEGORY "module-loader"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [[nil nil #9=(headline (:standard-properties [263 263 285 2957 2957 0 #1# nil element t nil 287 2955 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] [nil nil #12=(headline (:standard-properties [4341 4341 4362 5585 5585 0 #1# nil element t nil 4364 5583 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 20) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #11=(headline (:standard-properties [2957 2957 2976 4341 4341 0 #1# nil element t nil 2978 4339 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 18) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #16=(headline (:standard-properties [158 158 169 263 263 0 #1# section element t nil 171 263 2 nil [org-element-deferred org-element--headline-deferred nil t] nil #2#] :pre-blank 0 :raw-value #6=[org-element-deferred org-element--headline-parse-title (t) t] :title #6# :level #6# :priority #6# :tags #6# :todo-keyword #6# :todo-type #6# :footnote-section-p #6# :archivedp #6# :commentedp #6#)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #7# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 31 0 nil top-comment element t nil nil nil nil nil nil nil #8=(section (:standard-properties [1 1 1 134 134 0 nil first-section element t nil 1 134 nil nil nil nil #7#]))] :key "TITLE" :value "Module Loader System")) 0] #8# 0] [[nil nil (keyword (:standard-properties [47 47 nil nil 113 0 nil nil element t nil nil nil nil nil nil nil #8#] :key "DESCRIPTION" :value "Safe module loading system for Emacs configuration")) 0] [nil nil #2# 0] (keyword (:standard-properties [113 113 nil nil 134 1 nil nil element t nil nil nil nil nil nil nil #8#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [31 31 nil nil 47 0 nil nil element t nil nil nil nil nil nil nil #8#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil #9# 0] [nil nil (src-block (:standard-properties [285 285 nil nil 2957 1 nil planning element t nil nil nil nil nil nil nil #10=(section (:standard-properties [285 285 285 2957 2957 0 nil section element t nil 285 2957 nil nil nil nil #9#]))] :language #13="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defvar emacs-config-modules-dir\12  (expand-file-name \"modules\" user-emacs-directory)\12  \"Directory containing modular configuration files.\")\12\12(defun load-config-module (module-name)\12  \"Safely load a configuration module with error handling.\"\12  (let ((module-file (expand-file-name (concat module-name \".org\") emacs-config-modules-dir)))\12    (if (file-exists-p module-file)\12        (condition-case err\12            (progn\12              (message \"Loading module: %s\" module-name)\12              (org-babel-load-file module-file)\12              (message \"[OK] Module loaded: %s\" module-name)\12              t) ; Return success\12          (error\12           (message \"[ERROR] Failed to load module %s: %s\" module-name (error-message-string err))\12           nil)) ; Return failure\12      (progn\12        (message \"[SKIP] Module not found: %s\" module-name)\12        nil))))\12\12(defun load-all-config-modules ()\12  \"Load all available configuration modules.\"\12  (interactive)\12  (when (file-directory-p emacs-config-modules-dir)\12    (let ((modules '())\12          (loaded-count 0)\12          (failed-count 0))\12\12      ;; Find all .org modules\12      (dolist (file (directory-files emacs-config-modules-dir nil \"\\\\.org$\"))\12        (let ((module-name (file-name-sans-extension file)))\12          (unless (string= module-name \"module-loader\") ; Don't load self\12            (push module-name modules))))\12\12      ;; Load each module\12      (dolist (module modules)\12        (if (load-config-module module)\12            (setq loaded-count (1+ loaded-count))\12          (setq failed-count (1+ failed-count))))\12\12      (message \"Module loading complete: %d loaded, %d failed\" loaded-count failed-count)\12      (list loaded-count failed-count))))\12\12(defun test-config-module (module-name)\12  \"Test a specific configuration module before loading.\"\12  (interactive \"sModule name: \")\12  (let ((module-file (expand-file-name (concat module-name \".org\") emacs-config-modules-dir)))\12    (if (file-exists-p module-file)\12        (condition-case err\12            (progn\12              (message \"Testing module: %s\" module-name)\12              ;; Test org-babel parsing without executing\12              (with-temp-buffer\12                (insert-file-contents module-file)\12                (org-mode)\12                (org-babel-map-src-blocks module-file\12                  (message \"Found code block in %s\" module-name)))\12              (message \"[OK] Module syntax valid: %s\" module-name)\12              t)\12          (error\12           (message \"[ERROR] Module syntax invalid %s: %s\" module-name (error-message-string err))\12           nil))\12      (message \"[ERROR] Module not found: %s\" module-name))))\12")) 0] #10# 0] [[nil nil #15=(section (:standard-properties [2976 2976 2976 4341 4341 0 nil section element t nil 2976 4341 nil nil nil nil #11#])) 0] [[nil nil #12# 0] [nil nil (src-block (:standard-properties [4362 4362 nil nil 5585 0 nil planning element t nil nil nil nil nil nil nil #14=(section (:standard-properties [4362 4362 4362 5585 5585 0 nil section element t nil 4362 5585 nil nil nil nil #12#]))] :language #13# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun validate-all-modules ()\12  \"Validate syntax of all configuration modules without loading them.\"\12  (interactive)\12  (when (file-directory-p emacs-config-modules-dir)\12    (let ((valid-count 0)\12          (invalid-count 0)\12          (results '()))\12\12      (dolist (module-info emacs-config-module-registry)\12        (let ((module-name (car module-info)))\12          (if (test-config-module module-name)\12              (progn\12                (setq valid-count (1+ valid-count))\12                (push (format \"[OK] %s\" module-name) results))\12            (progn\12              (setq invalid-count (1+ invalid-count))\12              (push (format \"[ERROR] %s\" module-name) results)))))\12\12      ;; Display results\12      (with-current-buffer (get-buffer-create \"*Module Validation*\")\12        (erase-buffer)\12        (insert \"=== Module Validation Results ===\\n\\n\")\12        (dolist (result (reverse results))\12          (insert (format \"%s\\n\" result)))\12        (insert (format \"\\nSummary: %d valid, %d invalid\\n\" valid-count invalid-count))\12        (goto-char (point-min))\12        (display-buffer (current-buffer)))\12\12      (message \"Validation complete: %d valid, %d invalid\" valid-count invalid-count))))\12")) 0] #14# 0] (src-block (:standard-properties [2976 2976 nil nil 4341 1 nil planning element t nil nil nil nil nil nil nil #15#] :language #13# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defvar emacs-config-module-registry\12  '((\"core-packages\" . \"Essential development packages (Projectile, Vertico, Eglot)\")\12    (\"font-system\" . \"JetBrains font enforcement and Unicode support\")\12    (\"window-navigation\" . \"Enhanced window and buffer navigation\")\12    (\"file-management\" . \"Treemacs and file browsing tools\")\12    (\"language-support\" . \"Multi-language development support (C, Odin)\")\12    (\"workspace-management\" . \"Multi-project workspace system\")\12    (\"odin-unicode\" . \"Unicode and font support for Odin mode\")\12    (\"enhanced-build\" . \"Enhanced build system with library support\"))\12  \"Registry of available configuration modules.\")\12\12(defun list-available-modules ()\12  \"List all available configuration modules.\"\12  (interactive)\12  (with-current-buffer (get-buffer-create \"*Config Modules*\")\12    (erase-buffer)\12    (insert \"=== Available Configuration Modules ===\\n\\n\")\12\12    (dolist (module emacs-config-module-registry)\12      (let ((name (car module))\12            (desc (cdr module))\12            (file (expand-file-name (concat (car module) \".org\") emacs-config-modules-dir)))\12        (insert (format \"[%s] %s\\n    %s\\n    File: %s\\n\\n\"\12                        (if (file-exists-p file) \"EXISTS\" \"MISSING\")\12                        name desc file))))\12\12    (goto-char (point-min))\12    (display-buffer (current-buffer))))\12")) 1] #11# 1] #16# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))