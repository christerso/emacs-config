;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #2=(headline (:standard-properties [107 107 130 3265 3265 0 #1=(:title) nil element t nil 132 3263 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 3265 3265 0 nil org-data nil t nil 3 3265 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/theme-system.org" :CATEGORY "theme-system"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 21) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil [nil nil #12=(headline (:standard-properties [2282 2282 2291 3265 3265 0 #1# nil element t nil 2293 3263 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #9=(headline (:standard-properties [1316 1316 1341 2282 2282 0 #1# nil element t nil 1343 2280 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #8=(headline (:standard-properties [130 130 162 1316 1316 0 #1# section element t nil 164 1314 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 31) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 30 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 107 107 0 nil first-section element t nil 1 107 nil nil nil nil #6#]))] :key "TITLE" :value "Theme System Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [46 46 nil nil 86 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Muted color theme system")) 0] [nil nil #2# 0] (keyword (:standard-properties [86 86 nil nil 107 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [30 30 nil nil 46 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil #10=(section (:standard-properties [162 162 162 1316 1316 0 nil section element t nil 162 1316 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [162 162 nil nil 1316 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Download and install voidlight theme\12(let ((theme-dir (expand-file-name \"themes\" user-emacs-directory))\12      (theme-file (expand-file-name \"themes/voidlight-theme.el\" user-emacs-directory)))\12\12  ;; Create themes directory if it doesn't exist\12  (unless (file-directory-p theme-dir)\12    (make-directory theme-dir t))\12\12  ;; Download theme file if it doesn't exist\12  (unless (file-exists-p theme-file)\12    (url-copy-file \"https://raw.githubusercontent.com/christerso/emacs-voidlight-theme/main/voidlight-theme.el\"\12                   theme-file t))\12\12  ;; Add themes directory to custom theme load path\12  (add-to-list 'custom-theme-load-path theme-dir)\12\12  ;; Load the voidlight theme\12  (load-theme 'voidlight t)\12\12  ;; Darker selection color for better visibility\12  (set-face-background 'region \"#1e2124\")\12\12  ;; Make dark blue text much brighter and more readable\12  (set-face-foreground 'font-lock-function-name-face \"#7db3ff\")  ; Bright blue\12  (set-face-foreground 'font-lock-type-face \"#7db3ff\")           ; Bright blue for types\12  (set-face-foreground 'font-lock-builtin-face \"#7db3ff\")        ; Bright blue for builtins\12")) 0] [[nil nil (src-block (:standard-properties [1341 1341 nil nil 2282 1 nil planning element t nil nil nil nil nil nil nil #14=(section (:standard-properties [1341 1341 1341 2282 2282 0 nil section element t nil 1341 2282 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Additional muted color adjustments\12(defun apply-muted-colors ()\12  \"Apply muted color scheme for comfortable coding.\"\12  (interactive)\12  ;; Override any overly bright colors with muted versions\12  (set-face-foreground 'font-lock-keyword-face \"#7aa2f7\")      ; Muted blue\12  (set-face-foreground 'font-lock-string-face \"#9ece6a\")       ; Muted green\12  (set-face-foreground 'font-lock-comment-face \"#565f89\")      ; Muted gray\12  (set-face-foreground 'font-lock-function-name-face \"#bb9af7\") ; Muted purple\12  (set-face-foreground 'font-lock-variable-name-face \"#c0caf5\") ; Muted white\12  (set-face-foreground 'font-lock-type-face \"#2ac3de\")         ; Muted cyan\12  (set-face-foreground 'font-lock-constant-face \"#ff9e64\")     ; Muted orange\12\12  (message \"Muted color scheme applied\"))\12\12;; Apply after theme loads\12(add-hook 'after-init-hook 'apply-muted-colors)\12(global-set-key (kbd \"C-c t m\") 'apply-muted-colors)\12")) 0] [nil [nil nil (src-block (:standard-properties [2291 2291 nil nil 3265 0 nil planning element t nil nil nil nil nil nil nil #13=(section (:standard-properties [2291 2291 2291 3265 3265 0 nil section element t nil 2291 3265 nil nil nil nil #12#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-theme-system-module ()\12  \"Test theme system module.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test theme availability\12    (if (custom-theme-enabled-p 'voidlight)\12        (push \"voidlight theme: ACTIVE\" results)\12      (push \"voidlight theme: NOT ACTIVE\" results))\12\12    ;; Test function definitions\12    (if (fboundp 'apply-muted-colors)\12        (push \"apply-muted-colors: DEFINED\" results)\12      (push \"apply-muted-colors: MISSING\" results))\12\12    ;; Test current colors\12    (let ((keyword-color (face-foreground 'font-lock-keyword-face)))\12      (push (format \"Keyword color: %s\" keyword-color) results))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*Theme Test*\")\12      (erase-buffer)\12      (insert \"=== Theme System Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (display-buffer (current-buffer)))\12\12    (message \"Theme system test completed\")))\12")) 0] #13# 1] #12# 1] #14# 1] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))