;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[nil nil #2=(headline (:standard-properties [123 123 149 2525 2525 0 #1=(:title) nil element t nil 151 2523 1 nil nil nil #6=(org-data (:standard-properties [1 1 1 2525 2525 0 nil org-data nil t nil 3 2525 nil nil nil nil nil] :path "c:/Users/chris/AppData/Roaming/.emacs.d/modules/file-management.org" :CATEGORY "file-management"))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 24) t] :title #3=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #5=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] [nil [nil nil #12=(headline (:standard-properties [1666 1666 1675 2525 2525 0 #1# nil element t nil 1677 2523 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 0] #9=(headline (:standard-properties [821 821 852 1666 1666 0 #1# nil element t nil 854 1664 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 30) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] #8=(headline (:standard-properties [149 149 167 821 821 0 #1# section element t nil 169 819 2 nil nil nil #2#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 17) t] :title #3# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #4# :archivedp #5# :commentedp nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[nil nil #6# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 33 0 nil top-comment element t nil nil nil nil nil nil nil #7=(section (:standard-properties [1 1 1 123 123 0 nil first-section element t nil 1 123 nil nil nil nil #6#]))] :key "TITLE" :value "File Management Module")) 0] #7# 0] [[nil nil (keyword (:standard-properties [49 49 nil nil 102 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "DESCRIPTION" :value "Enhanced file browsing and management")) 0] [nil nil #2# 0] (keyword (:standard-properties [102 102 nil nil 123 1 nil nil element t nil nil nil nil nil nil nil #7#] :key "STARTUP" :value "overview")) 0] (keyword (:standard-properties [33 33 nil nil 49 0 nil nil element t nil nil nil nil nil nil nil #7#] :key "AUTHOR" :value "Chris")) 0] [[[nil nil #10=(section (:standard-properties [167 167 167 821 821 0 nil section element t nil 167 821 nil nil nil nil #8#])) 0] [nil nil #9# 0] (src-block (:standard-properties [167 167 nil nil 821 1 nil planning element t nil nil nil nil nil nil nil #10#] :language #11="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Install treemacs packages\12(unless (package-installed-p 'treemacs)\12  (package-install 'treemacs))\12\12(unless (package-installed-p 'treemacs-projectile)\12  (package-install 'treemacs-projectile))\12\12(require 'treemacs)\12(require 'treemacs-projectile)\12\12;; Basic treemacs configuration\12(setq treemacs-width 35\12      treemacs-follow-after-init t\12      treemacs-show-hidden-files t)\12\12;; Key bindings\12(global-set-key (kbd \"M-0\") 'treemacs-select-window)\12(global-set-key (kbd \"C-x t t\") 'treemacs)\12(global-set-key (kbd \"C-x t C-t\") 'treemacs-find-file)\12\12;; Auto-follow and sync\12(treemacs-follow-mode t)\12(treemacs-filewatch-mode t)\12")) 0] [[nil nil (src-block (:standard-properties [852 852 nil nil 1666 1 nil planning element t nil nil nil nil nil nil nil #14=(section (:standard-properties [852 852 852 1666 1666 0 nil section element t nil 852 1666 nil nil nil nil #9#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(when (eq system-type 'windows-nt)\12  ;; Simple everything search\12  (defun everything-search ()\12    \"Search files using Everything.\"\12    (interactive)\12    (let* ((query (read-string \"Everything search: \"))\12           (results (when (> (length query) 0)\12                      (split-string\12                       (shell-command-to-string (format \"C:\\\\Users\\\\chris\\\\es.exe -n 20 \\\"%s\\\"\" query))\12                       \"\\n\" t))))\12      (if results\12          (let ((choice (completing-read \"Select file: \" results)))\12            (when choice\12              (if (file-exists-p choice)\12                  (find-file choice)\12                (message \"File not found: %s\" choice))))\12        (message \"No results found for: %s\" query))))\12\12  (global-set-key (kbd \"C-c s\") 'everything-search))\12")) 0] [nil [nil nil (src-block (:standard-properties [1675 1675 nil nil 2525 0 nil planning element t nil nil nil nil nil nil nil #13=(section (:standard-properties [1675 1675 1675 2525 2525 0 nil section element t nil 1675 2525 nil nil nil nil #12#]))] :language #11# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun test-file-management-module ()\12  \"Test file management module.\"\12  (interactive)\12  (let ((results '()))\12\12    ;; Test treemacs\12    (if (featurep 'treemacs)\12        (push \"treemacs: LOADED\" results)\12      (push \"treemacs: NOT LOADED\" results))\12\12    ;; Test everything search (Windows only)\12    (when (eq system-type 'windows-nt)\12      (if (fboundp 'everything-search)\12          (push \"everything-search: DEFINED\" results)\12        (push \"everything-search: MISSING\" results)))\12\12    ;; Display results\12    (with-current-buffer (get-buffer-create \"*File Management Test*\")\12      (erase-buffer)\12      (insert \"=== File Management Test ===\\n\\n\")\12      (dolist (result (reverse results))\12        (insert (format \"%s\\n\" result)))\12      (display-buffer (current-buffer)))\12\12    (message \"File management test completed\")))\12")) 0] #13# 1] #12# 1] #14# 1] #8# 1] nil nil 0] org-element--cache-compare)) ((version "2.3")))